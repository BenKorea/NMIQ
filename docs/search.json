[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "블로그",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nDocker\n\n\n\n\n\n\ndocker\n\n\n\nUbuntu에 Docker 설치 및 사용법\n\n\n\n\n\nMar 9, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nUbuntu on WSL2\n\n\n\n\n\n\ndeveolpment\n\n\nopen source\n\n\noperating system\n\n\n\n\n\n\n\n\n\nMar 13, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nDoseUtility\n\n\n\n\n\n\ndeveolpment\n\n\ndicom\n\n\ndose extrator\n\n\nopen source\n\n\nDoseUtility\n\n\n\nDICOM에서 선량정보 추출 open source\n\n\n\n\n\nFeb 19, 2024\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nOpenREM\n\n\n\n\n\n\ndeveolpment\n\n\ndicom\n\n\ndose extrator\n\n\nopen source\n\n\nOpenREM\n\n\n\nDICOM에서 선량정보 추출 open source\n\n\n\n\n\nFeb 19, 2024\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nOrthanc\n\n\n\n\n\n\ndicom server\n\n\nOrthanc\n\n\n\ndicom server open source\n\n\n\n\n\nFeb 26, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nSDKMAN\n\n\n\n\n\n\nJAVA\n\n\n\n개발도구 관리툴\n\n\n\n\n\nMar 7, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\n개발기록\n\n\n\n\n\n\ndeveolpment\n\n\nnote\n\n\n\n개발과정을 기록하여 나의 기억과 협업에 도움이 되고자 함\n\n\n\n\n\nFeb 19, 2024\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nNMDose\n\n\n\n\n\n\ndeveolpment\n\n\nnote\n\n\nNMDose\n\n\n\nNMDose 개발과정기록\n\n\n\n\n\nFeb 19, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nSpeficifCharactorSet decoding\n\n\n\n\n\n\nNMDose\n\n\nDICOM\n\n\nSpecificCharactorSet\n\n\ndecoding\n\n\n\nNMDose 개발 중 DICOM SpeficifCharactorSet decoding 오류 해결하기\n\n\n\n\n\nFeb 25, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nOpen Source\n\n\n\n\n\n\ndeveolpment\n\n\nnote\n\n\nopen source\n\n\n\n오픈소스들을 이용한 선량추출 시스템 구축과정을 기록\n\n\n\n\n\nFeb 19, 2024\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nOpen Source\n\n\n\n\n\n\ndeveolpment\n\n\nnote\n\n\nopen source\n\n\n\n오픈소스들을 이용한 선량추출 시스템 구축과정을 기록\n\n\n\n\n\nFeb 19, 2024\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nConformance\n\n\n\n\n\n\nDICOM\n\n\nConformance\n\n\n\nDICOM Conformance\n\n\n\n\n\nMar 1, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nDICOM\n\n\n\n\n\n\nDICOM\n\n\n\nDICOM 공부한 것을 정리하였습니다.\n\n\n\n\n\nMar 1, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\n구조\n\n\n\n\n\n\nDICOM\n\n\nstructure\n\n\n\nDICOM 파일의 구조\n\n\n\n\n\nMar 1, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\n사이트사용법\n\n\n\n\n\n\n사용법\n\n\n\n이 웹사이트 고유의 사용법이 설명되어 있습니다.\n\n\n\n\n\nDec 20, 2024\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nKNMIP\n\n\n\n\n\n\nstandardization\n\n\nKNMIP\n\n\n\nKorea Nuclear Medicine Imaging Proceudure Version v1.0\n\n\n\n\n\nMar 1, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nProcedure\n\n\n\n\n\n\nstandardization\n\n\nprocedure\n\n\n\n표준 검사명칭\n\n\n\n\n\nMar 1, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nStandardization\n\n\n\n\n\n\nDICOM\n\n\n\n핵릐학 검사명칭 표준화\n\n\n\n\n\nMar 1, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nConquest\n\n\n\n\n\n\ndicom server\n\n\n\ndicom server open source\n\n\n\n\n\nFeb 26, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nDCM4chee\n\n\n\n\n\n\nDCM4che\n\n\n\nDCM4che로 구현한 open source PACS\n\n\n\n\n\nMar 7, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nDCMTK\n\n\n\n\n\n\ndeveolpment\n\n\nnote\n\n\nopen source\n\n\n\nopen source 이용한 반자동화\n\n\n\n\n\nMar 4, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nDICOM 서버\n\n\n\n\n\n\ndicom server\n\n\n\n개발기록\n\n\n\n\n\nFeb 26, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nDicoogle\n\n\n\n\n\n\ndicom server\n\n\nDicoogle\n\n\n\ndicom server open source\n\n\n\n\n\nFeb 26, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nPostgreSQL\n\n\n\n\n\n\ntools\n\n\nopen source\n\n\ndatabase\n\n\nPostgreSQL\n\n\n\ndatabase open source\n\n\n\n\n\nMar 5, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nSlicer\n\n\n\n\n\n\ndicom server\n\n\n\ndicom server open source\n\n\n\n\n\nFeb 26, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nTools\n\n\n\n\n\n\ndeveolpment\n\n\nnote\n\n\nopen source\n\n\n\nopen source 이용한 반자동화\n\n\n\n\n\nFeb 19, 2024\n\n\nBenKorea\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/tools/docker.html",
    "href": "posts/tools/docker.html",
    "title": "Docker",
    "section": "",
    "text": "공식도커사이트(https://docs.docker.com/engine/install/ubuntu/) 내용을 참고하여 진행함"
  },
  {
    "objectID": "posts/tools/docker.html#사전-준비",
    "href": "posts/tools/docker.html#사전-준비",
    "title": "Docker",
    "section": "사전 준비",
    "text": "사전 준비\n\n방화벽 제한 사항\n어려워서 패스\n\n⚠️ 주의\nufw 또는 firewalld를 사용하여 방화벽을 관리하는 경우, Docker를 통해 컨테이너 포트를 노출하면 방화벽 규칙을 우회할 수 있습니다. 자세한 내용은 Docker와 ufw 문서를 참고하세요.\nDocker는 iptables-nft 및 iptables-legacy만 지원합니다. nft를 사용하여 생성한 방화벽 규칙은 Docker에서 동작하지 않습니다. 방화벽 규칙을 적용하려면 iptables 또는 ip6tables를 사용해야 하며, DOCKER-USER 체인에 추가해야 합니다. 자세한 내용은 패킷 필터링 및 방화벽 문서를 참고하세요.\n\n\n\n운영체제 요구 사항\nDocker Engine을 설치하려면 다음 중 하나의 64비트 우분투(Ubuntu) 버전이 필요합니다.\n\nUbuntu Oracular 24.10\nUbuntu Noble 24.04 (LTS)\nUbuntu Jammy 22.04 (LTS)\nUbuntu Focal 20.04 (LTS)\n\nDocker Engine은 다음 아키텍처를 지원합니다: x86_64 (amd64), armhf, arm64, s390x, ppc64le (ppc64el)\n\n📌 참고:\nUbuntu 기반 배포판(예: Linux Mint)은 공식적으로 지원되지 않습니다."
  },
  {
    "objectID": "posts/tools/docker.html#이전-버전-제거",
    "href": "posts/tools/docker.html#이전-버전-제거",
    "title": "Docker",
    "section": "이전 버전 제거",
    "text": "이전 버전 제거\nDocker Engine을 설치하기 전에 충돌을 방지하기 위해 기존의 비공식 Docker 패키지를 제거해야 합니다.\n\n제거해야 하는 패키지 목록:\n\ndocker.io\ndocker-compose\ndocker-compose-v2\ndocker-doc\npodman-docker\ncontainerd\nrunc\n\nfor 명령어를 사용하면 한줄의 명령어로 모두 제거할 수 있습니다.\n\n\n\nBash\n\nfor pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done\n\n\n완벽제거를 위해서는 다음의 문서를 참고하세요. Docker Engine 설치하기 전에 기존 Docker 제거하기"
  },
  {
    "objectID": "posts/tools/ubuntu_on_wsl2.html",
    "href": "posts/tools/ubuntu_on_wsl2.html",
    "title": "Ubuntu on WSL2",
    "section": "",
    "text": "유지보수를 간편하게 할려면 도커로 배포 필요 도커는 리눅스환경이 필요하여, 일단은 윈도우10에서 WSL2을 활성화 필요",
    "crumbs": [
      "Tools",
      "Ubuntu on WSL2"
    ]
  },
  {
    "objectID": "posts/tools/ubuntu_on_wsl2.html#필요성",
    "href": "posts/tools/ubuntu_on_wsl2.html#필요성",
    "title": "Ubuntu on WSL2",
    "section": "",
    "text": "유지보수를 간편하게 할려면 도커로 배포 필요 도커는 리눅스환경이 필요하여, 일단은 윈도우10에서 WSL2을 활성화 필요",
    "crumbs": [
      "Tools",
      "Ubuntu on WSL2"
    ]
  },
  {
    "objectID": "posts/tools/ubuntu_on_wsl2.html#wsl2-완전-제거",
    "href": "posts/tools/ubuntu_on_wsl2.html#wsl2-완전-제거",
    "title": "Ubuntu on WSL2",
    "section": "2 WSL2 완전 제거",
    "text": "2 WSL2 완전 제거\n\n2.1 VirtualMachinePlatform 제거\n\n\n\nPowerShell\n\ndism.exe /online /disable-feature /featurename:VirtualMachinePlatform /norestart\n\n\n\n\n2.2 wsl 제거\n\n\n\nPowerShell\n\ndism.exe /online /disable-feature /featurename:Microsoft-Windows-Subsystem-Linux /norestart\n\n\n\n\n2.3 재부팅\n\n\n2.4 WSL2 커널 및 배포판 삭제\nC:\\Users\\&lt;사용자이름&gt;\\AppData\\Local\\Packages\\ 에서 Canonical* 폴더 삭제 C:\\Program Files\\WindowsApps 내 Canonical* 폴더 삭제 (권한 필요)\n후자는 권한이 필요하여, C:\\Program Files\\WindowsApps 폴더의 소유자를 변경하는 것보다 아래와 같이 Command Prompt를 관리자권한으로 열어서 del 명령으로 삭제하는 것이 훨씬 간편하다.\n시작메뉴를 누르고 검색에 cmd를 입력하고, 마우스 오른쪽 버튼을 눌러 관리자권한으로 실행한다.\n\n\n\nCommand Prompt\n\ndel /f /q \"C:\\경로\\파일이름\"",
    "crumbs": [
      "Tools",
      "Ubuntu on WSL2"
    ]
  },
  {
    "objectID": "posts/tools/ubuntu_on_wsl2.html#wsl2-설치",
    "href": "posts/tools/ubuntu_on_wsl2.html#wsl2-설치",
    "title": "Ubuntu on WSL2",
    "section": "3 WSL2 설치",
    "text": "3 WSL2 설치\n배포를 도커를 할 예정이라, WSL2를 설치하여 우분투로 설치하고 도커설치를 진행하였다. https://learn.microsoft.com/ko-kr/windows/wsl/install을 참고하여 진행하였다.\n자동설치가 잘 되지 않아서 수동설치를 진행하였다.\n\n3.1 Window edition 및 버전확인\n윈도우 10 HOME 버전의 경우 WSL 1 사용이 불가능했으나, 빌드 19603부터 WSL 2를 지원한다.\n\n\n\n3.2 wsl 옵션 활성화\nPowershell 관리자권한으로 열어서 아래 명령어를 실행한다.\n\n\n\nPowerShell\n\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /norestart\n\n\n\n\n3.3 wsl 옵션 활성화 검증\n\n\n\nPowerShell\n\nwsl --list --verbose\n\n\n\n\n3.4 VirtualMachinePlatform 옵션 활성화\n\n\n\nPowerShell\n\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /norestart\n\n\n\n\n3.5 VirtualMachinePlatform 옵션 활성화 검증\n\n\n\nPowerShell\n\nwsl --set-default-version 2\n\n\n\n\n3.6 Linux 커널 업데이트\n윈도우에 포함된 기본 버전을 업데이트하는 방법도 있다.\n\n\n\nPowerShell\n\nwsl --upgrade\n\n\n아래의 명령을 전후로 사용하면 Kenel의 버전을 비교하여 알 수 있다.\n\n\n\nPowerShell\n\nwsl --status",
    "crumbs": [
      "Tools",
      "Ubuntu on WSL2"
    ]
  },
  {
    "objectID": "posts/tools/ubuntu_on_wsl2.html#우분투-설치",
    "href": "posts/tools/ubuntu_on_wsl2.html#우분투-설치",
    "title": "Ubuntu on WSL2",
    "section": "4 우분투 설치",
    "text": "4 우분투 설치\nMicrosoft Store에서 Ubuntu를 검색하여 설치한다.\n\n4.1 우분투 초기화\n\n\n\nbash\n\nwsl --set-version Ubuntu-20.04 2\n\n\n\n\n4.2 우분투 실행\n시작메뉴에서 Ubuntu를 검색하여 실행한다.\n\n\n4.3 우분투 업데이트\n\n\n\nbash\n\nsudo apt update\nsudo apt upgrade",
    "crumbs": [
      "Tools",
      "Ubuntu on WSL2"
    ]
  },
  {
    "objectID": "posts/tools/docker.html#설치",
    "href": "posts/tools/docker.html#설치",
    "title": "Docker",
    "section": "설치",
    "text": "설치\n여러가지 설치방법이 있으나 여기서는 apt를 이용한 방법으로 진행\n\nSet up Docker’s apt repository.\n\n\n\nBash\n\nsudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n\n\n\nca-certificates: SSL 인증서를 관리하는 패키지로, HTTPS 연결을 신뢰할 수 있도록 설정합니다.\ncurl: 인터넷에서 파일을 다운로드할 수 있도록 하는 명령줄 도구입니다.\ninstall -m 0755 -d /etc/apt/keyrings\n\nm 0755: 디렉토리의 권한을 0755(소유자는 읽기/쓰기/실행 가능, 다른 사용자는 읽기/실행 가능)로 설정\nd: 디렉토리를 생성하는 옵션\n\nf: 요청 실패 시 에러 메시지를 출력\ns: 진행 상태 메시지를 출력하지 않음\nS: -s 옵션과 함께 사용하여 오류 발생 시 메시지를 출력\nL: 리디렉션이 있는 경우 최종 목적지까지 따라감 다운로드된 GPG 키는 /etc/apt/keyrings/docker.asc에 저장됩니다. chmod a+r /etc/apt/keyrings/docker.asc a+r: 모든 사용자(a: all users)에게 읽기(r: read) 권한을 부여 이 설정이 없으면 apt가 GPG 키를 읽을 수 없기 때문에 저장소 검증이 실패할 수 있습니다.\n\n\n\n\nBash\n\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n  $(. /etc/os-release && echo \"${UBUNTU_CODENAME:-$VERSION_CODENAME}\") stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt-get update\n\n\n\ndeb [옵션] 저장소URL 배포판코드네임 [섹션]의 문법을 따릅니다.\ndeb [arch=\\((dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc]\n  - deb: 패키지 저장소를 추가하는 명령어\n  - arch=\\)(dpkg –print-architecture): 현재 시스템의 아키텍처를 출력하는 명령어\n\nsigned-by=/etc/apt/keyrings/docker.asc: GPG 키를 사용하여 저장소를 검증\n\nhttps://download.docker.com/linux/ubuntu\n\n도커 공식 저장소 주소\n\n\\((. /etc/os-release && echo \"\\){UBUNTU_CODENAME:-\\(VERSION_CODENAME}\") stable:\n  - /etc/os-release: 환경변수를 load\n  - && echo \"\\){UBUNTU_CODENAME:-$VERSION_CODENAME}“): CODENAME이 없으면 VERSION_CODENAME을 출력\nsudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n\ntee: 파일에 입력한 내용을 출력하고 파일에 저장\n/dev/null: 화면 출력을 무시\n\n\n\n\nInstall the Docker packages.\n\n\n\nBash\n\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n\n\n\nVerifying by hello-world\n\n\n\nBash\n\nsudo docker run hello-world"
  },
  {
    "objectID": "posts/tools/docker.html#portainer-설치",
    "href": "posts/tools/docker.html#portainer-설치",
    "title": "Docker",
    "section": "Portainer 설치",
    "text": "Portainer 설치\n\nPortainer 개념\nPortainer는 Docker 및 Kubernetes 컨테이너 관리를 위한 웹 기반 UI 도구입니다.\nCLI(Command Line Interface) 없이도 컨테이너, 이미지, 네트워크, 볼륨 등을 손쉽게 관리할 수 있습니다.\n\n🔹 주요 기능\n\n컨테이너 관리: 실행, 중지, 삭제, 로그 확인\n이미지 관리: 이미지 다운로드, 삭제, 태그 지정\n네트워크 및 볼륨 관리: 컨테이너 간 네트워크 설정 및 데이터 볼륨 관리\n사용자 및 액세스 제어: 여러 사용자와 권한 설정 가능\nSwarm 및 Kubernetes 지원: Docker Swarm과 Kubernetes 클러스터 관리 가능\n\n\n\n\n\nPortainer 설치 방법\nPortainer는 Docker 컨테이너로 실행되므로, Docker가 설치되어 있어야 합니다.\n\n볼륨 생성\nPortainer의 설정 및 데이터는 볼륨(volume)에 저장됩니다.\n\n\n\nBash\n\ndocker volume create portainer_data\n\n\n\n\nPortainer 컨테이너 실행**\n이는 원격으로 이미지다운로드를 포함한다.\n\n\n\nBash\n\ndocker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce\n\n\n\n-d: 백그라운드에서 컨테이너 실행\n-p 8000:8000 -p 9000:9000: 호스트 포트와 컨테이너 포트 매핑\n--name=portainer: 컨테이너 이름 지정\n--restart=always: 컨테이너가 종료되면 자동으로 재시작\n-v /var/run/docker.sock:/var/run/docker.sock: 호스트의 Docker 소켓을 컨테이너 내부로 연결\n-v portainer_data:/data: Portainer 설정 및 데이터를 저장할 볼륨 연결\nportainer/portainer-ce: Portainer 컨테이너 이미지\n\n\n\n실행중인 container 확인\n\n\n\nBash\n\ndocker ps\n\n\n\n\nPortainer 제거\n\n\n\nBash\n\ndocker stop portainer\ndocker rm -f portainer"
  }
]