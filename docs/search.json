[
  {
    "objectID": "posts/tools/dicom_server/Slicer.html",
    "href": "posts/tools/dicom_server/Slicer.html",
    "title": "Slicer",
    "section": "",
    "text": "구축 필요성\n개발 단계에서 실제 PACS를 모사할 수 있는 별도의 DICOM 서버를 구축할 필요가 아래와 같은 오픈소스들을 검토하였다.\n\n\nSlicer",
    "crumbs": [
      "Tools",
      "dicom server",
      "Slicer"
    ]
  },
  {
    "objectID": "posts/tools/dicom_server/dicoogle.html",
    "href": "posts/tools/dicom_server/dicoogle.html",
    "title": "Dicoogle",
    "section": "",
    "text": "구축 필요성\n개발 단계에서 실제 PACS를 모사할 수 있는 별도의 DICOM 서버를 구축할 필요가 아래와 같은 오픈소스들을 검토하였다.\n\n\nSicoogle",
    "crumbs": [
      "Tools",
      "dicom server",
      "Dicoogle"
    ]
  },
  {
    "objectID": "posts/tools/dicom_server/Conquest.html",
    "href": "posts/tools/dicom_server/Conquest.html",
    "title": "Conquest",
    "section": "",
    "text": "구축 필요성\n개발 단계에서 실제 PACS를 모사할 수 있는 별도의 DICOM 서버를 구축할 필요가 아래와 같은 오픈소스들을 검토하였다.\n\n\nConquest dicom server\n설정과 사용법이 간단하여 저자가 테스트에 가장 먼저 성공한 프로그램이기도 하다. 특히 저장폴더가 직관적이다.\n\n설치파일\n최신 설치파일은 공식사이트가 아닌 Cnquest User Forum에 공개된 2024년 9월 25일 release된 버전 1.5.0e (dicomserver-1.5.0e.zip, https://forum.iq-image.com/forum/index.php?thread/50654-conquest-1-5-0e-released/)가 최신이다.\n\n\n설치방법\n설치방법은 원하는 폴더에서 설치파일의 압축을 풀면된다. 업그레이드시에는 매뉴얼에 따르면 다음의 지시를 따르면 된다. - 기본적으로 exe 및 dll 파일을 교체하면 업데이트 가능하지만, - 일부 설정 파일(dicom.sql, dgatesop.lst, dicom.ini)을 조정할 경우 데이터베이스를 다시 생성해야 할 수도 있습니다. - 서버는 반드시 업데이트 전에 중지해야 하며, 서비스로 실행 중이면 제어판에서 중지 또는 서비스 해제가 필요합니다. - 데이터베이스 재생성이 필요한 경우 매우 오랜 시간이 걸릴 수 있으므로 주의해야 합니다. - 기존 데이터를 유지하려면 dicom.sql을 백업 후 복원하는 것이 좋습니다. - 저자의 경우는 data폴더, acrnema.map, dicom.ini 파일을 제외하고 삭제한 뒤 설치압축파일을 풀면 데이터와 설정이 유지된 체로 업그레이드 하고 database reganeration을 하였다.\n\n\n활용 현황\n이 서버프로그램으로 저자는 NMDose, NMIQ, NMFullData, NMTEMPSERVER, ZettaPACS를 구축하여 선량분석시스템, 영상품질자동화, clinical PACS모사, 임시서버, clinical PACS 모사의 목적으로 사용하고 있다.\n\n\nLua script\n쿼리를 정교하게 할 수 있다.\n\n\n저장파일의 이름을 지정하는 방식\n%id_%studydate%modality_%series_%sopuid.dcm",
    "crumbs": [
      "Tools",
      "dicom server",
      "Conquest"
    ]
  },
  {
    "objectID": "posts/manual.html",
    "href": "posts/manual.html",
    "title": "사이트사용법",
    "section": "",
    "text": "날짜의 의미\n\n각 웹페이지는 두 가지 날짜가 있으며 이 웹사이트에서는 구별되어 사용되고 있습니다.\n\nPUBLISHED는 최초작성일에 해당하는 개념입니다.\n\n블로그에서 Date-Oldest, Date-Newest 정렬(Order By)할 때 기준으로 사용됩니다.\n\nMODIFIED는 최종수정일에 해당하는 개념입니다.\n\n블로그에서 Default로 정렬할 때 기준으로 사용됩니다.\nDefault로 정렬할 때 내부적으로 MODIFIED 날짜의 최신순으로 되지만, 정렬된 페이지목록에서 각 페이지의 왼쪽의 보여지는 날짜는 MODIFIED가 아닌 PUBLISHED를 보여줍니다. 이로인해 Defalut 정렬에서 각 페이지의 날짜와 정렬이 맞지 않는 것처럼 착각될 수 있으므로 주의를 요합니다.\n\n\n\n\n\n댓글\n\n댓글 기능은 guthub에 가입해야 가능합니다.\n아직 개발중인 기능이라 웹페이지가 갱신될 때 기존 댓글이 사라질 수 있으니 알파/베타 테스터 분들의 양해를 바랍니다."
  },
  {
    "objectID": "posts/dicom/information/information.html",
    "href": "posts/dicom/information/information.html",
    "title": "Information",
    "section": "",
    "text": "DICOM",
    "crumbs": [
      "DICOM",
      "Information"
    ]
  },
  {
    "objectID": "posts/development/open_source/others.html",
    "href": "posts/development/open_source/others.html",
    "title": "Open Source",
    "section": "",
    "text": "open source 이용한 반자동화",
    "crumbs": [
      "개발기록",
      "opon source",
      "Open Source"
    ]
  },
  {
    "objectID": "posts/development/NMDose/SpecificCharactorSet_decoding.html",
    "href": "posts/development/NMDose/SpecificCharactorSet_decoding.html",
    "title": "SpeficifCharactorSet decoding",
    "section": "",
    "text": "DICOM에서 사용되는 문자열은 인코딩(Encoding) 시 1~3바이트(또는 그 이상)의 이진 데이터로 저장되며, 이때 인코딩 방식은 SpecificCharacterSet(0008,0005) 태그에 기록된다. 따라서, SpecificCharacterSet의 값에 맞추어 디코딩(Decoding)하면 문자열이 깨지지 않고 올바르게 변환될 수 있다.\n한글이 포함된 문자열은 DICOM에서 최소 두 가지 방식으로 저장될 수 있다. - ISO_IR 149(EUC-KR)는 과거 한글 DICOM 시스템에서 사용되었으며, 완성형 한글만 지원하므로 일부 한글 표현이 제한될 수 있다. - ISO_IR 192(UTF-8)은 유니코드 기반의 인코딩 방식으로 다국어 지원이 가능하며, 최신 DICOM 시스템에서 가장 권장되는 방식이다.\npydicom.dcmread()를 사용하면 DICOM 파일 내의 문자열 데이터는 SpecificCharacterSet(0008,0005)에 따라 자동으로 디코딩되어 Python의 str 객체로 반환됩니다.\n만약에 실제 encoding과 specificcharacterset 지정이 다르면 pydicom 결과는 깨진 문자열이 보이게 되는데, 이 때, 지정대로 다시 encoding해주고 dicom 저장 시 되었던 encoding으로 decoding 한다면 오류를 해결 할 수 있다.\na1_dicom_reader에 정의된 함수에서는 조건과 인코딩과 디코딩이 모두 같은 방식으로 잘 못 만들어진 부분이 있다. 수정이 필요함 2025-02-26\n스캐너 종류에 따라 검사명이 깨어져 있으며 이는 deccoding fix가 되지 않는다.",
    "crumbs": [
      "개발기록",
      "NM Dose",
      "SpeficifCharactorSet decoding"
    ]
  },
  {
    "objectID": "posts/development/development.html",
    "href": "posts/development/development.html",
    "title": "개발기록",
    "section": "",
    "text": "핵의학 영상의 최적화는 품질과 선량을 동시에 고려해야 한다. 그러나 현재는 최적화를 검토하기 위한 기초자료의 생성과정이 수작업에 많이 의존해야 하며, 영상품질은 consensus를 이룬 지표조차 없는 상태이다. 따라서 최적화를 검토하기 위한 기초자료 생성용 프로그램 개발이 필요하다. 이 프로그램은 우선을 선량정보를 추출하는 기능을 구현하고자 한다. 가능할지 모르겠지만 향후에는 영상품질지표까지 추출하는 기능까지 구현하고자 한다.\n개발은 크게 - open source 이용한 반자동화 - 가칭 NMDose 프로그램 개발 - 방사성의약품투여량과 CT dose index를 추출하여 선량-영상관리의 도구로 활용 - 장차 DLR 조사의 도구로 활용하는 것을 목표로 한다. - 가칭 NMIQ 프로그램의 개발 - 장차 영상품질지표를 수집하여 데이터베이스로 구축하여 선량과 연계분석하고 - 장차 영상으로부터 자동으로 영상품질지표를 추출하는 것을 목표로 한다.\n본격적인 개발에 앞서 PACS 시스템을 모사하는 것이 필요하여 다음과 같이 모사하고자 한다.\n\nDICOM 서버\n병원 PACS로부터 선량정보를 추출할 때를 모사하고자 하면, 병원 PACS에 대한 모사 시스템과",
    "crumbs": [
      "개발기록"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "블로그",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nWSL2\n\n\n\n\n\n\ndeveolpment\n\n\nopen source\n\n\noperating system\n\n\n\n\n\n\n\n\n\nMar 13, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nDocker\n\n\n\n\n\n\ndocker\n\n\n\n\n\n\n\n\n\nMar 9, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\n운영체제\n\n\n\n\n\n\ndeveolpment\n\n\nopen source\n\n\noperating system\n\n\n\n\n\n\n\n\n\nMar 13, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\n개발기록\n\n\n\n\n\n\ndeveolpment\n\n\nnote\n\n\n\n개발과정을 기록하여 나의 기억과 협업에 도움이 되고자 함\n\n\n\n\n\nFeb 19, 2024\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nNMDose\n\n\n\n\n\n\ndeveolpment\n\n\nnote\n\n\nNMDose\n\n\n\nNMDose 개발과정기록\n\n\n\n\n\nFeb 19, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nSpeficifCharactorSet decoding\n\n\n\n\n\n\nNMDose\n\n\nDICOM\n\n\nSpecificCharactorSet\n\n\ndecoding\n\n\n\nNMDose 개발 중 DICOM SpeficifCharactorSet decoding 오류 해결하기\n\n\n\n\n\nFeb 25, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nOpen Source\n\n\n\n\n\n\ndeveolpment\n\n\nnote\n\n\nopen source\n\n\n\n오픈소스들을 이용한 선량추출 시스템 구축과정을 기록\n\n\n\n\n\nFeb 19, 2024\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nOpen Source\n\n\n\n\n\n\ndeveolpment\n\n\nnote\n\n\nopen source\n\n\n\n오픈소스들을 이용한 선량추출 시스템 구축과정을 기록\n\n\n\n\n\nFeb 19, 2024\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nConformance\n\n\n\n\n\n\nDICOM\n\n\nConformance\n\n\n\nDICOM Conformance\n\n\n\n\n\nMar 1, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nDICOM\n\n\n\n\n\n\nDICOM\n\n\n\nDICOM 공부한 것을 정리하였습니다.\n\n\n\n\n\nMar 1, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\n구조\n\n\n\n\n\n\nDICOM\n\n\nstructure\n\n\n\nDICOM 파일의 구조\n\n\n\n\n\nMar 1, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nOrthanc\n\n\n\n\n\n\ndicom server\n\n\nOrthanc\n\n\n\ndicom server open source\n\n\n\n\n\nFeb 26, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nSDKMAN\n\n\n\n\n\n\nJAVA\n\n\n\n개발도구 관리툴\n\n\n\n\n\nMar 7, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nDoseUtility\n\n\n\n\n\n\ndeveolpment\n\n\ndicom\n\n\ndose extrator\n\n\nopen source\n\n\nDoseUtility\n\n\n\nDICOM에서 선량정보 추출 open source\n\n\n\n\n\nFeb 19, 2024\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nOpenREM\n\n\n\n\n\n\ndeveolpment\n\n\ndicom\n\n\ndose extrator\n\n\nopen source\n\n\nOpenREM\n\n\n\nDICOM에서 선량정보 추출 open source\n\n\n\n\n\nFeb 19, 2024\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\n사이트사용법\n\n\n\n\n\n\n사용법\n\n\n\n이 웹사이트 고유의 사용법이 설명되어 있습니다.\n\n\n\n\n\nDec 20, 2024\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nKNMIP\n\n\n\n\n\n\nstandardization\n\n\nKNMIP\n\n\n\nKorea Nuclear Medicine Imaging Proceudure Version v1.0\n\n\n\n\n\nMar 1, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nProcedure\n\n\n\n\n\n\nstandardization\n\n\nprocedure\n\n\n\n표준 검사명칭\n\n\n\n\n\nMar 1, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nStandardization\n\n\n\n\n\n\nDICOM\n\n\n\n핵릐학 검사명칭 표준화\n\n\n\n\n\nMar 1, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nDCMTK\n\n\n\n\n\n\ndeveolpment\n\n\nnote\n\n\nopen source\n\n\n\nopen source 이용한 반자동화\n\n\n\n\n\nMar 4, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nConquest\n\n\n\n\n\n\ndicom server\n\n\n\ndicom server open source\n\n\n\n\n\nFeb 26, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nDCM4chee\n\n\n\n\n\n\nDCM4che\n\n\n\nDCM4che로 구현한 open source PACS\n\n\n\n\n\nMar 7, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nDICOM 서버\n\n\n\n\n\n\ndicom server\n\n\n\n개발기록\n\n\n\n\n\nFeb 26, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nDicoogle\n\n\n\n\n\n\ndicom server\n\n\nDicoogle\n\n\n\ndicom server open source\n\n\n\n\n\nFeb 26, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nPostgreSQL\n\n\n\n\n\n\ntools\n\n\nopen source\n\n\ndatabase\n\n\nPostgreSQL\n\n\n\ndatabase open source\n\n\n\n\n\nMar 5, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nSlicer\n\n\n\n\n\n\ndicom server\n\n\n\ndicom server open source\n\n\n\n\n\nFeb 26, 2025\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\ndose_extractor\n\n\n\n\n\n\ndeveolpment\n\n\ndicom\n\n\ndose extrator\n\n\nopen source\n\n\n\nDICOM에서 선량정보 추출 open source\n\n\n\n\n\nFeb 19, 2024\n\n\nBenKorea\n\n\n\n\n\n\n\n\n\n\n\n\nTools\n\n\n\n\n\n\ndeveolpment\n\n\nnote\n\n\nopen source\n\n\n\nopen source 이용한 반자동화\n\n\n\n\n\nFeb 19, 2024\n\n\nBenKorea\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/development/NMDose/NMDose.html",
    "href": "posts/development/NMDose/NMDose.html",
    "title": "NMDose",
    "section": "",
    "text": "Dose Report들을 가지고 있는 DICOM Server\n“C:”에 데이터가 있음",
    "crumbs": [
      "개발기록",
      "NM Dose"
    ]
  },
  {
    "objectID": "posts/development/NMDose/NMDose.html#python에서-package의-개념",
    "href": "posts/development/NMDose/NMDose.html#python에서-package의-개념",
    "title": "NMDose",
    "section": "### Python에서 package의 개념",
    "text": "### Python에서 package의 개념\n\nDICOM 읽어오기\n\ndicom_files는 리스트이므로 []로 초기화\nos.walk는 (root, dirs, files) 형태의 튜플을 반환하며 Python의 for loop에서는 리스트나 튜플의 요소를 동시에 할당하는 “언패킹” 기능이 지원되므로 이를 사용\n튜플은 변형할 수 없는 리스트라 할 수 있으며, 리스트에 비해 속도가 빠르고 메모리 사용량이 적으며, 함수 반환 값, 여러 변수 할당(Unpacking), for 루프에서 다중 변수 할당 등에 자주 사용된다.\nendswith()는 str 클래스의 내장 메서드로써 string 문자에 dot 연산자로 붙이면 T/F를 반환함\nfile_path를 만들 때, dirs를 제외함에 주의할 것\npydicom.read는 DICOM을 다루기 위한 목적으로 만들어진 Dataset 클래쓰의 객체를 반환해주며, get method를 이용하면 속성명으로 안전하게 (= 값이 없는 경우에는 default를 지정하여) 조회하여 할 수 있다.\n스캐너 또는 제조사별로 DICOM 문자코딩이 달라 SpecificCharacterSet을 파악하고, 이를 위한 인코딩디코딩 함수를 만들었다. 하지만 인코딩디코딩 오류전략을 잘 못 구현하여 수정이 필요하다. 디버기을 위해서 original_study_description 등을 사용하고 있다.\n\n\n\nimport os\nimport pydicom\n\ndef read_dicom_files(directory):\n    dicom_files = []\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if file.endswith(\".dcm\"):\n                file_path = os.path.join(root, file)\n                ds = pydicom.dcmread(file_path, stop_before_pixels=True)\n                character_set = ds.get('SpecificCharacterSet', 'ISO_IR 192')  # UTF-8 as default\n\n                original_study_description = ds.get('StudyDescription', 'N/A')\n                original_patient_name = ds.get('PatientName', 'N/A')\n\n                print(f\"File: {file} - Specific Character Set: {character_set}\")\n\n                if 'StudyDescription' in ds:\n                    study_description = decode_based_on_character_set(ds.StudyDescription, character_set)\n                    ds.StudyDescription = study_description\n                    print(f\"Original Study Description: {original_study_description} -&gt; Decoded: {study_description}\")\n\n                if 'PatientName' in ds:\n                    patient_name = decode_based_on_character_set(ds.PatientName, character_set)\n                    ds.PatientName = patient_name\n                    print(f\"Original Patient Name: {original_patient_name} -&gt; Decoded: {patient_name}\")\n\n                dicom_files.append(ds)\n    return dicom_files\n\ndef decode_based_on_character_set(value, character_set):\n    if character_set == 'ISO_IR 100':\n        return value.encode('iso-8859-1').decode('latin1')\n    elif character_set == 'ISO_IR 192':\n        return value  # UTF-8 encoded, no need to transform\n    elif character_set == 'ISO_IR 149':\n        return value.encode('iso-8859-1').decode('euc-kr')\n    return value  # Default or unknown character set, return as is\n\n# 실행할 디렉토리 경로 설정\ndirectory = r\"C:\\NMDose\\data\"\n\n# 지정된 디렉토리에서 DICOM 파일들을 읽어옵니다.\ndicom_files = read_dicom_files(directory)\n\nFile: 1.3.46.670589.5.2.10.2156913941.892665339.860724_0001_002000_14579035620000.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: \n -&gt; Decoded: \n\nOriginal Patient Name: HEAD EXP2 -&gt; Decoded: HEAD EXP2\nFile: 1.3.46.670589.5.2.10.2156913941.892665339.860724_0001_003000_14579035620001.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: \n -&gt; Decoded: \n\nOriginal Patient Name: HEAD EXP2 -&gt; Decoded: HEAD EXP2\nFile: CT_0501_1.3.12.2.1107.5.1.4.45592.30000024022200491945300000190.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: PET^KCCH_Brain_Alz (Adult) -&gt; Decoded: PET^KCCH_Brain_Alz (Adult)\nOriginal Patient Name: NOH OK BUN -&gt; Decoded: NOH OK BUN\nFile: CT_0501_1.3.12.2.1107.5.1.4.45592.30000024031223303798400000224.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: PET^KCCH_Brain_Alz (Adult) -&gt; Decoded: PET^KCCH_Brain_Alz (Adult)\nOriginal Patient Name: KIM SUK JA -&gt; Decoded: KIM SUK JA\nFile: CT_0501_1.3.12.2.1107.5.1.4.45592.30000024011023285176500000773.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: PET^KCCH_Brain_Alz (Adult) -&gt; Decoded: PET^KCCH_Brain_Alz (Adult)\nOriginal Patient Name: SEO JUNG YE -&gt; Decoded: SEO JUNG YE\nFile: CT_0999_1.2.840.113619.2.290.3.296522351.221.1704686293.232.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾ -&gt; Decoded: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾\nOriginal Patient Name: Song Jong Rim -&gt; Decoded: Song Jong Rim\nFile: SR_0997_1.2.840.113619.2.290.3.296522351.221.1704686293.234.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾ -&gt; Decoded: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾\nOriginal Patient Name: Song Jong Rim -&gt; Decoded: Song Jong Rim\nFile: CT_0999_1.2.840.113619.2.290.3.296522351.345.1710718439.32.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾ -&gt; Decoded: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾\nOriginal Patient Name: Jung Yang Gu -&gt; Decoded: Jung Yang Gu\nFile: SR_0997_1.2.840.113619.2.290.3.296522351.345.1710718439.34.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾ -&gt; Decoded: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾\nOriginal Patient Name: Jung Yang Gu -&gt; Decoded: Jung Yang Gu\nFile: CT_0501_1.3.12.2.1107.5.1.4.45592.30000024020423410571800001245.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: PET^KCCH_Brain_Alz (Adult) -&gt; Decoded: PET^KCCH_Brain_Alz (Adult)\nOriginal Patient Name: PARK KEUM SEON -&gt; Decoded: PARK KEUM SEON\nFile: CT_0501_1.3.12.2.1107.5.1.4.45592.30000024010923324851500000245.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: PET^KCCH_Brain_Alz (Adult) -&gt; Decoded: PET^KCCH_Brain_Alz (Adult)\nOriginal Patient Name: KIM JUNG BUN -&gt; Decoded: KIM JUNG BUN\nFile: CT_0501_1.3.12.2.1107.5.1.4.45592.30000024013123395351500000200.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: PET^KCCH_Brain_Alz (Adult) -&gt; Decoded: PET^KCCH_Brain_Alz (Adult)\nOriginal Patient Name: JEON HAE YEONG -&gt; Decoded: JEON HAE YEONG\nFile: CT_0999_1.2.840.113619.2.290.3.296522351.163.1708299137.595.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾ -&gt; Decoded: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾\nOriginal Patient Name: Kim Gwi Sun -&gt; Decoded: Kim Gwi Sun\nFile: SR_0997_1.2.840.113619.2.290.3.296522351.163.1708299137.597.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾ -&gt; Decoded: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾\nOriginal Patient Name: Kim Gwi Sun -&gt; Decoded: Kim Gwi Sun\nFile: CT_0501_1.3.12.2.1107.5.1.4.45592.30000024010823285431200000274.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: PET^KCCH_Brain_Alz (Adult) -&gt; Decoded: PET^KCCH_Brain_Alz (Adult)\nOriginal Patient Name: LEE SANG YEONG -&gt; Decoded: LEE SANG YEONG\nFile: CT_0999_1.2.840.113619.2.290.3.296522351.31.1705997406.736.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: (Á¾ÇÕ°ËÁø)F-18 ÇÃ·Î¶óÇ -&gt; Decoded: (Á¾ÇÕ°ËÁø)F-18 ÇÃ·Î¶óÇ\nOriginal Patient Name: Lee Gyeong Seon -&gt; Decoded: Lee Gyeong Seon\nFile: SR_0997_1.2.840.113619.2.290.3.296522351.31.1705997406.738.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: (Á¾ÇÕ°ËÁø)F-18 ÇÃ·Î¶óÇ -&gt; Decoded: (Á¾ÇÕ°ËÁø)F-18 ÇÃ·Î¶óÇ\nOriginal Patient Name: Lee Gyeong Seon -&gt; Decoded: Lee Gyeong Seon\nFile: CT_0999_1.2.840.113619.2.290.3.296522351.30.1707286774.167.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾ -&gt; Decoded: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾\nOriginal Patient Name: Park Yeong E -&gt; Decoded: Park Yeong E\nFile: SR_0997_1.2.840.113619.2.290.3.296522351.30.1707286774.169.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾ -&gt; Decoded: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾\nOriginal Patient Name: Park Yeong E -&gt; Decoded: Park Yeong E\nFile: CT_0501_1.3.12.2.1107.5.1.4.45592.30000024021400020553100000614.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: PET^KCCH_Brain_Alz (Adult) -&gt; Decoded: PET^KCCH_Brain_Alz (Adult)\nOriginal Patient Name: KIM MI JA -&gt; Decoded: KIM MI JA\nFile: CT_0999_1.2.840.113619.2.290.3.296522351.31.1705997414.669.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾ -&gt; Decoded: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾\nOriginal Patient Name: Choi Eul Rye -&gt; Decoded: Choi Eul Rye\nFile: SR_0997_1.2.840.113619.2.290.3.296522351.31.1705997414.671.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾ -&gt; Decoded: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾\nOriginal Patient Name: Choi Eul Rye -&gt; Decoded: Choi Eul Rye\nFile: CT_0501_1.3.12.2.1107.5.1.4.45592.30000024011823432560900000123.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: PET^KCCH_Brain_Alz (Adult) -&gt; Decoded: PET^KCCH_Brain_Alz (Adult)\nOriginal Patient Name: PARK MYUNG JA -&gt; Decoded: PARK MYUNG JA\n\n# 읽어온 DICOM 파일의 개수를 출력합니다.\nprint(f\"dicom 파일 개수: {len(dicom_files)}\")\n\ndicom 파일 개수: 23\n\n\n\ndef filter_dicom_files_by_description(dicom_files):\n    \"\"\"DICOM 파일들을 SeriesDescription에 따라 'Dose Report'와 'Patient Protocol'로 필터링합니다.\"\"\"\n    dose_report_files = []\n    patient_protocol_files = []\n\n    for file in dicom_files:\n        if hasattr(file, 'SeriesDescription'):\n            if file.SeriesDescription == \"Dose Report\":\n                dose_report_files.append(file)\n            elif file.SeriesDescription == \"Patient Protocol\":\n                patient_protocol_files.append(file)\n\n    return dose_report_files, patient_protocol_files\n\n\n# 'Dose Report'와 'Patient Protocol'에 해당하는 파일 필터링\ndose_report_files, patient_protocol_files = filter_dicom_files_by_description(dicom_files)\n\n# 결과 확인\nprint(f\"Dose Report 파일 개수: {len(dose_report_files)}\")\n\nDose Report 파일 개수: 6\n\nprint(f\"Patient Protocol 파일 개수: {len(patient_protocol_files)}\")\n\nPatient Protocol 파일 개수: 9",
    "crumbs": [
      "개발기록",
      "NM Dose"
    ]
  },
  {
    "objectID": "posts/development/open_source/open_source.html",
    "href": "posts/development/open_source/open_source.html",
    "title": "Open Source",
    "section": "",
    "text": "Dose Report Retrieve\n\n병원 PACS로부터 추출하는 것은 시도하지 않았다.\n핵의학과 mini PACS로부터 선량정보를 가지고 있는 DICOM 파일들만 선택적으로 추출 가능한지 검토하였다.\nDiscovery 710에서 Dose Report는 SeriesDescription 태그에 “Dose Report”가 기록되어 있거나 SeriesNumber 태그에 “999”가 기록되어져 있으므로 이를 이용해서 query & retrieve 할 수 있다.\n저자의 병원 Zetta PACS에서는 SeriesDescription이나 SeriesNumber를 필터하여 DICOM send할 수 있는 기능이 없으므로 open source dicom server에서 query & retrieve 하는 방식으로 먼저 접근하였다.\nConquest에서는 SeriesDescription\n\nopen source를 이용해서 추출했을 때 결과는 아래와 같았다.",
    "crumbs": [
      "개발기록",
      "opon source"
    ]
  },
  {
    "objectID": "posts/dicom/dicom.html",
    "href": "posts/dicom/dicom.html",
    "title": "DICOM",
    "section": "",
    "text": "DICOM",
    "crumbs": [
      "DICOM"
    ]
  },
  {
    "objectID": "posts/dicom/information/structure.html",
    "href": "posts/dicom/information/structure.html",
    "title": "구조",
    "section": "",
    "text": "DICOM Structure",
    "crumbs": [
      "DICOM",
      "Information",
      "구조"
    ]
  },
  {
    "objectID": "posts/standardization/standardization.html",
    "href": "posts/standardization/standardization.html",
    "title": "Standardization",
    "section": "",
    "text": "다기관 선량정보수집에 필요한 검사명칭 표준화 현황과 제안",
    "crumbs": [
      "표준화",
      "Standardization"
    ]
  },
  {
    "objectID": "posts/tools/dicom_server/dicom_server.html",
    "href": "posts/tools/dicom_server/dicom_server.html",
    "title": "DICOM 서버",
    "section": "",
    "text": "구축 필요성\n개발 단계에서 실제 PACS를 모사할 수 있는 별도의 DICOM 서버를 구축할 필요가 아래와 같은 오픈소스들을 검토하였다.\n\n\nConquest dicom server\n설정과 사용법이 간단하여 저자가 테스트에 가장 먼저 성공한 프로그램이기도 하다. 특히 저장폴더가 직관적이다.\n\n설치파일\n최신 설치파일은 공식사이트가 아닌 Cnquest User Forum에 공개된 2024년 9월 25일 release된 버전 1.5.0e (dicomserver-1.5.0e.zip, https://forum.iq-image.com/forum/index.php?thread/50654-conquest-1-5-0e-released/)가 최신이다.\n\n\n설치방법\n설치방법은 원하는 폴더에서 설치파일의 압축을 풀면된다. 업그레이드시에는 매뉴얼에 따르면 다음의 지시를 따르면 된다. - 기본적으로 exe 및 dll 파일을 교체하면 업데이트 가능하지만, - 일부 설정 파일(dicom.sql, dgatesop.lst, dicom.ini)을 조정할 경우 데이터베이스를 다시 생성해야 할 수도 있습니다. - 서버는 반드시 업데이트 전에 중지해야 하며, 서비스로 실행 중이면 제어판에서 중지 또는 서비스 해제가 필요합니다. - 데이터베이스 재생성이 필요한 경우 매우 오랜 시간이 걸릴 수 있으므로 주의해야 합니다. - 기존 데이터를 유지하려면 dicom.sql을 백업 후 복원하는 것이 좋습니다. - 저자의 경우는 data폴더, acrnema.map, dicom.ini 파일을 제외하고 삭제한 뒤 설치압축파일을 풀면 데이터와 설정이 유지된 체로 업그레이드 하고 database reganeration을 하였다.\n\n\n활용 현황\n이 서버프로그램으로 저자는 NMDose, NMIQ, NMFullData, NMTEMPSERVER, ZettaPACS를 구축하여 선량분석시스템, 영상품질자동화, clinical PACS모사, 임시서버, clinical PACS 모사의 목적으로 사용하고 있다.\n\n\nLua script\n쿼리를 정교하게 할 수 있다.\n\n\n저장파일의 이름을 지정하는 방식\n%id_%studydate%modality_%series_%sopuid.dcm\n\n\n\nOrthanc DICOM Server\n벨기에에서 개발한 오픈소스이다. Restful APT를 지원하기 때문에 DICOM query, retrieve, send, move 등을 쉽게 구현할 수 있으리라는기대감으로 설치하여 향후의 시스템을 모사하여 개발을 진행하고 있다.\n\n설치파일\n2025년 2월 27일 release된 25.2.0 버전이 최신이다. https://orthanc.uclouvain.be/downloads/windows-64/installers/index.html 저자는 C:\\Program Files\\ 폴더보다는 C:\\를 선호하여 C:\\Orthanc에 설치하였다.\n\n\n주의사항\n설치이후 처음 실행시에 설치폴더의 Orthanc.exe를 먼저 실핼시키고 방화벽을 해제한 후 explorer를 실행해야 하는 것 같다.\n\n\n장단점\nOrthanc은 웹 기반 DICOM 관리 및 AI 분석, 클라우드 통합이 필요한 경우 유리하다고 한다. Conquest DICOM Server는 빠른 속도의 로컬 PACS, 대량의 DICOM 데이터 처리, 자동화된 스크립팅 (Lua)이 필요한 경우 적합하다고 한다.\n\n\n설정\n.Configuration\\orthanc.json을 notepad 등으로 수정하며 default 값으로 진행하였다.\n// HTTP port for the REST services and for the GUI “HttpPort” : 8042,\n// The DICOM Application Entity Title (cannot be longer than 16 // characters) “DicomAet” : “ORTHANC”,\n// The DICOM port “DicomPort” : 4242,\n// The default encoding that is assumed for DICOM files without // “SpecificCharacterSet” DICOM tag, and that is used when answering // C-FIND requests (including worklists). The allowed values are // “Ascii”, “Utf8”, “Latin1”, “Latin2”, “Latin3”, “Latin4”, // “Latin5”, “Cyrillic”, “Windows1251”, “Arabic”, “Greek”, “Hebrew”, // “Thai”, “Japanese”, “Chinese”, “JapaneseKanji”, “Korean”, and // “SimplifiedChinese”. “DefaultEncoding” : “Latin1”,\n// The list of the known DICOM modalities. This option is ignored if // “DicomModalitiesInDatabase” is set to “true”, in which case you // must use the REST API to define modalities. “DicomModalities” : { “NMDOSE” : [ “NMDOSE”, “127.0.0.1”, 5678 ], “NMIQ” : [ “NMIQ”, “127.0.0.1”, 5679 ], “NMFULLDATA” : [ “NMFULLDATA”, “127.0.0.1”, 5680 ], “NMTEMPSERVER” : [ “NMTEMPSERVER”, “127.0.0.1”, 5681 ], “ZETTAPACS” : [ “ZETTAPACS”, “127.0.0.1”, 5682 ], “SLICER” : [ “SLICER”, “127.0.0.1”, 11112 ] /**\n\n\nremote server",
    "crumbs": [
      "Tools",
      "dicom server"
    ]
  },
  {
    "objectID": "posts/tools/dicom_server/Orthanc.html",
    "href": "posts/tools/dicom_server/Orthanc.html",
    "title": "Orthanc",
    "section": "",
    "text": "벨기에에서 개발한 오픈소스이다. Restful APT를 지원하기 때문에 DICOM query, retrieve, send, move 등을 쉽게 구현할 수 있으리라는기대감으로 설치하여 향후의 시스템을 모사하여 개발을 진행하고 있다.\n\n완전제거방법\n구동이 제대로 되지 않을 때가 많아서 완전제거방법을 조사하니 아래와 같았다.\n\n서비스 관리자에서 “Orthanc” 서비스를 찾아 중지합니다.\nC:\\Program Files\\Orthanc 폴더를 삭제합니다.\nC:\\Users\\&lt;username&gt;\\AppData\\Local\\Orthanc 폴더를 삭제합니다.\nOrthanc 설정 레지스트리 삭제 (Windows만 해당):\n\nregedit를 실행합니다.\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Orthanc 키를 삭제합니다.\n\n제어판에서 “프로그램 제거”를 선택하고 “Orthanc”를 제거합니다.\n\n\n\n설치파일\n공식사이트 https://orthanc.uclouvain.be/downloads/windows-64/installers/index.html 2025년 2월 27일 release된 25.2.0 버전이 최신이다.\n\n\n설치폴더\n기본설치폴더는 C:\\Program Files\\Orthanc Server이며 data는 C:\\Orthanc에 기본 설치된다. 이를 변경하면 Plugins에서 설치경로 인식의 문제 등으로 실행에 문제가 발생하는 것 같으므로 기본설치폴더에 설치하는 것이 좋겠다.\n\n\n설정파일\nmain 설정파일은 C:\\Program Files\\Orthanc Server\\Configuration\\orthanc.json이다.\n\n\nDICOMModality 설정\n매뉴얼(https://orthanc.uclouvain.be/book/integrations/modality.html#configure-modality)의 예시는 아래와 같았다.\n// The list of the known DICOM modalities\n\"DicomModalities\" : {\n  \"echo1\" : [ \"ECHO1\", \"123.124.125.10\", 104 ]\n},\n위를 참고하여 개발시스템의 DicomModality를 아래와 같이 설정하였다.\n  \"NMDOSE\" : [ \"NMDOSE\", \"127.0.0.1\", 5678 ],\n  \"NMIQ\" : [ \"NMIQ\", \"127.0.0.1\", 5679 ],\n  \"NMFULLDATA\" : [ \"NMFULLDATA\", \"127.0.0.1\", 5680 ],\n  \"NMTEMPSERVER\" : [ \"NMTEMPSERVER\", \"127.0.0.1\", 5681 ],\n  \"ZETTAPACS\" : [ \"ZETTAPACS\", \"127.0.0.1\", 5682 ],\n  \"SLICER\" : [ \"SLICER\", \"127.0.0.1\", 11112 ]\nconfiguration을 설정하는 동안에 Orthanc를 완전히 중지하였다가 수정 후 service를 재개하여야 수정사항이 반영됨을 주의해야 한다. 그리고 쓰기권한이 제한된 경우에는 이를 해결해야 한다.\n\n\nPort\n\n4242\n\n\n\nHPPT port\n\n8042\n\n\n\n장단점\nOrthanc은 웹 기반 DICOM 관리 및 AI 분석, 클라우드 통합이 필요한 경우 유리하다고 한다. Conquest DICOM Server는 빠른 속도의 로컬 PACS, 대량의 DICOM 데이터 처리, 자동화된 스크립팅 (Lua)이 필요한 경우 적합하다고 한다.\n\n\n설정\n\nPostgreSQL로 DICOM을 저장하기 위해서 postgresql.json을 아래와 같이 설정하였다.\n\n{\n  \"PostgreSQL\" : {\n    \"EnableIndex\" : true,\n    \"EnableStorage\" : true,               // You likely don't need to enable this option\n    \"Host\" : \"localhost\",\n    \"Port\" : 5432,\n    \"Database\" : \"orthanc\",\n    \"Username\" : \"nmuser\",\n    \"Password\" : \"iloveben\",\n    \"Lock\" : true,\n    \"EnableSsl\" : false,                   // New in release 3.0\n    \"MaximumConnectionRetries\" : 10,       // New in release 3.0\n    \"ConnectionRetryInterval\" : 5,         // New in release 3.0\n    \"IndexConnectionsCount\" : 50,          // New in release 4.0 - new default value in 7.0\n    \"TransactionMode\": \"ReadCommitted\",    // New in release 6.0 - new default value in 7.0\n    \"EnableVerboseLogs\": false,            // New in release 6.0\n    \"HousekeepingInterval\": 1,             // New in release 7.0\n    \"AllowInconsistentChildCounts\": false  // New in release 7.2\n  }\n}",
    "crumbs": [
      "Tools",
      "dicom server",
      "Orthanc"
    ]
  },
  {
    "objectID": "posts/tools/dcmtk/dcmtk.html",
    "href": "posts/tools/dcmtk/dcmtk.html",
    "title": "DCMTK",
    "section": "",
    "text": "독일의 Office 회사에서 개발한 오픈소스로 C++로 작성되어 속도가 빠르지만 사용법이 어려움\n프로젝트에서는 DCM4che가 쿼리가 원하는 만큼 가능하여 2순위로 둠"
  },
  {
    "objectID": "posts/dicom/conformance/conformance.html",
    "href": "posts/dicom/conformance/conformance.html",
    "title": "Conformance",
    "section": "",
    "text": "Discovery 710/610 Optima 560"
  },
  {
    "objectID": "posts/tools/dicom_server/PostgreSQL.html",
    "href": "posts/tools/dicom_server/PostgreSQL.html",
    "title": "PostgreSQL",
    "section": "",
    "text": "Berkeley Software Distribution (BSD) license\n\n\n필요성\nOrthanc dicom 저장시 연결하면 속도가 향상되므로 필요\n\n\n설치파일\nhttps://www.enterprisedb.com/downloads/postgres-postgresql-downloads\n\n\n설치방법\n\n프로그램 자체는 default folder에 설치한다.\n그러나 data는 여러가지 목적에 의해서\n\nPC에서는 E:\\17,\n노트북에서는 C:\\17설치하였다.\n\npassworkd는 “postgres”로 진행하고 추후 변경하기로 했다.\npath 설정은 manual로 해야 한다.\n\n\n\nOrthanc의 dicom 저장소로 설정하기\n\ndatabase 만들기\n\nPostgreSQL의 정상실행여부는 윈도우 서비스에서 확인할 수 있고, 다양한 command로도 확인할 수 있다.\n\npsql -U postgres\nCREATE USER nmuser WITH PASSWORD 'iloveben';\nCREATE DATABASE orthanc OWNER nmuser;\nGRANT ALL PRIVILEGES ON DATABASE orthanc TO nmuser;"
  },
  {
    "objectID": "posts/tools/os/wsl2_ubuntu.html",
    "href": "posts/tools/os/wsl2_ubuntu.html",
    "title": "Ubuntu",
    "section": "",
    "text": "개발과 배포를 고려할 때, 윈도우10에서 WSL2을 활성화 후 우분투 상의 도커환경 구축을 진행하였다.",
    "crumbs": [
      "Tools",
      "운영체제",
      "Ubuntu"
    ]
  },
  {
    "objectID": "posts/tools/os/wsl2_ubuntu.html#필요성",
    "href": "posts/tools/os/wsl2_ubuntu.html#필요성",
    "title": "Ubuntu",
    "section": "",
    "text": "개발과 배포를 고려할 때, 윈도우10에서 WSL2을 활성화 후 우분투 상의 도커환경 구축을 진행하였다.",
    "crumbs": [
      "Tools",
      "운영체제",
      "Ubuntu"
    ]
  },
  {
    "objectID": "posts/tools/os/wsl2_ubuntu.html#wsl2-설치",
    "href": "posts/tools/os/wsl2_ubuntu.html#wsl2-설치",
    "title": "Ubuntu",
    "section": "2 WSL2 설치",
    "text": "2 WSL2 설치\n배포를 도커를 할 예정이라, WSL2를 설치하여 우분투로 설치하고 도커설치를 진행하였다. https://learn.microsoft.com/ko-kr/windows/wsl/install을 참고하여 진행하였다.\n자동설치가 잘 되지 않아서 수동설치를 진행하였다.\n\n2.1 설정\n\n단계 - Linux용 Windows 하위 시스템 사용\n\n\nWin+X를 이용하여 PowerShell을 관리자권한으로 열고 아래를 실행시킨다. 이는\n\n\n\n\nPowerShell\n\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n\n\n\n단계 - WSL 2 실행을 위한 요구 사항 확인\n단계 - Virtual Machine 기능 사용\n\n\n2.1.1 Window edition 및 버전확인\n윈도우 10 HOME 버전의 경우 WSL 1 사용이 불가능했으나, 빌드 19603부터 WSL 2를 지원한다.\n\n\n\n2.1.2 WSL2 활성화\npowershell 관리자권한으로 열어\ninstall wsl\nwsl --set-default-version 2\n\n\n2.1.3 Linux 배포판 설치\nMicrosoft Store에서 Ubuntu를 설치한다.",
    "crumbs": [
      "Tools",
      "운영체제",
      "Ubuntu"
    ]
  },
  {
    "objectID": "posts/tools/os/wsl2.html",
    "href": "posts/tools/os/wsl2.html",
    "title": "WSL2",
    "section": "",
    "text": "유지보수를 간편하게 하고자 배포시 도커를 사용하고자 하였다. 도커는 리눅스환경이 필요하여, 일단은 윈도우10에서 WSL2을 활성화시켜야 하였다.",
    "crumbs": [
      "Tools",
      "운영체제",
      "WSL2"
    ]
  },
  {
    "objectID": "posts/tools/os/wsl2.html#필요성",
    "href": "posts/tools/os/wsl2.html#필요성",
    "title": "WSL2",
    "section": "",
    "text": "유지보수를 간편하게 하고자 배포시 도커를 사용하고자 하였다. 도커는 리눅스환경이 필요하여, 일단은 윈도우10에서 WSL2을 활성화시켜야 하였다.",
    "crumbs": [
      "Tools",
      "운영체제",
      "WSL2"
    ]
  },
  {
    "objectID": "posts/tools/os/wsl2.html#wsl2-설치",
    "href": "posts/tools/os/wsl2.html#wsl2-설치",
    "title": "WSL2",
    "section": "2 WSL2 설치",
    "text": "2 WSL2 설치\n배포를 도커를 할 예정이라, WSL2를 설치하여 우분투로 설치하고 도커설치를 진행하였다. https://learn.microsoft.com/ko-kr/windows/wsl/install을 참고하여 진행하였다.\n자동설치가 잘 되지 않아서 수동설치를 진행하였다.\n\n2.1 설정\n\n단계 - Linux용 Windows 하위 시스템 사용\n\n\nWin+X를 이용하여 PowerShell을 관리자권한으로 열고 아래를 실행시킨다. 이는\n\n\n\n\nPowerShell\n\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n\n\n\n단계 - WSL 2 실행을 위한 요구 사항 확인\n단계 - Virtual Machine 기능 사용\n\n\n2.1.1 Window edition 및 버전확인\n윈도우 10 HOME 버전의 경우 WSL 1 사용이 불가능했으나, 빌드 19603부터 WSL 2를 지원한다.\n\n\n\n2.1.2 WSL2 활성화\npowershell 관리자권한으로 열어\ninstall wsl\nwsl --set-default-version 2\n\n\n2.1.3 Linux 배포판 설치\nMicrosoft Store에서 Ubuntu를 설치한다.",
    "crumbs": [
      "Tools",
      "운영체제",
      "WSL2"
    ]
  },
  {
    "objectID": "posts/tools/ubuntu_on_wsl2.html",
    "href": "posts/tools/ubuntu_on_wsl2.html",
    "title": "WSL2",
    "section": "",
    "text": "유지보수를 간편하게 하고자 배포시 도커를 사용하고자 하였다. 도커는 리눅스환경이 필요하여, 일단은 윈도우10에서 WSL2을 활성화시켜야 하였다.",
    "crumbs": [
      "Tools",
      "WSL2"
    ]
  },
  {
    "objectID": "posts/tools/ubuntu_on_wsl2.html#필요성",
    "href": "posts/tools/ubuntu_on_wsl2.html#필요성",
    "title": "WSL2",
    "section": "",
    "text": "유지보수를 간편하게 하고자 배포시 도커를 사용하고자 하였다. 도커는 리눅스환경이 필요하여, 일단은 윈도우10에서 WSL2을 활성화시켜야 하였다.",
    "crumbs": [
      "Tools",
      "WSL2"
    ]
  },
  {
    "objectID": "posts/tools/ubuntu_on_wsl2.html#wsl2-설치",
    "href": "posts/tools/ubuntu_on_wsl2.html#wsl2-설치",
    "title": "WSL2",
    "section": "2 WSL2 설치",
    "text": "2 WSL2 설치\n배포를 도커를 할 예정이라, WSL2를 설치하여 우분투로 설치하고 도커설치를 진행하였다. https://learn.microsoft.com/ko-kr/windows/wsl/install을 참고하여 진행하였다.\n자동설치가 잘 되지 않아서 수동설치를 진행하였다.\n\n2.1 설정\n\n단계 - Linux용 Windows 하위 시스템 사용\n\n\nWin+X를 이용하여 PowerShell을 관리자권한으로 열고 아래를 실행시킨다. 이는\n\n\n\n\nPowerShell\n\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n\n\n\n단계 - WSL 2 실행을 위한 요구 사항 확인\n단계 - Virtual Machine 기능 사용\n\n\n2.1.1 Window edition 및 버전확인\n윈도우 10 HOME 버전의 경우 WSL 1 사용이 불가능했으나, 빌드 19603부터 WSL 2를 지원한다.\n\n\n\n2.1.2 WSL2 활성화\npowershell 관리자권한으로 열어\ninstall wsl\nwsl --set-default-version 2\n\n\n2.1.3 Linux 배포판 설치\nMicrosoft Store에서 Ubuntu를 설치한다.",
    "crumbs": [
      "Tools",
      "WSL2"
    ]
  },
  {
    "objectID": "posts/tools/Slicer.html",
    "href": "posts/tools/Slicer.html",
    "title": "Slicer",
    "section": "",
    "text": "구축 필요성\n개발 단계에서 실제 PACS를 모사할 수 있는 별도의 DICOM 서버를 구축할 필요가 아래와 같은 오픈소스들을 검토하였다.\n\n\nSlicer",
    "crumbs": [
      "Tools",
      "Slicer"
    ]
  },
  {
    "objectID": "posts/tools/PostgreSQL.html",
    "href": "posts/tools/PostgreSQL.html",
    "title": "PostgreSQL",
    "section": "",
    "text": "Berkeley Software Distribution (BSD) license\n\n\n필요성\nOrthanc dicom 저장시 연결하면 속도가 향상되므로 필요\n\n\n설치파일\nhttps://www.enterprisedb.com/downloads/postgres-postgresql-downloads\n\n\n설치방법\n\n프로그램 자체는 default folder에 설치한다.\n그러나 data는 여러가지 목적에 의해서\n\nPC에서는 E:\\17,\n노트북에서는 C:\\17설치하였다.\n\npassworkd는 “postgres”로 진행하고 추후 변경하기로 했다.\npath 설정은 manual로 해야 한다.\n\n\n\nOrthanc의 dicom 저장소로 설정하기\n\ndatabase 만들기\n\nPostgreSQL의 정상실행여부는 윈도우 서비스에서 확인할 수 있고, 다양한 command로도 확인할 수 있다.\n\npsql -U postgres\nCREATE USER nmuser WITH PASSWORD 'iloveben';\nCREATE DATABASE orthanc OWNER nmuser;\nGRANT ALL PRIVILEGES ON DATABASE orthanc TO nmuser;"
  },
  {
    "objectID": "posts/tools/dicom_server.html",
    "href": "posts/tools/dicom_server.html",
    "title": "DICOM 서버",
    "section": "",
    "text": "구축 필요성\n개발 단계에서 실제 PACS를 모사할 수 있는 별도의 DICOM 서버를 구축할 필요가 아래와 같은 오픈소스들을 검토하였다.\n\n\nConquest dicom server\n설정과 사용법이 간단하여 저자가 테스트에 가장 먼저 성공한 프로그램이기도 하다. 특히 저장폴더가 직관적이다.\n\n설치파일\n최신 설치파일은 공식사이트가 아닌 Cnquest User Forum에 공개된 2024년 9월 25일 release된 버전 1.5.0e (dicomserver-1.5.0e.zip, https://forum.iq-image.com/forum/index.php?thread/50654-conquest-1-5-0e-released/)가 최신이다.\n\n\n설치방법\n설치방법은 원하는 폴더에서 설치파일의 압축을 풀면된다. 업그레이드시에는 매뉴얼에 따르면 다음의 지시를 따르면 된다. - 기본적으로 exe 및 dll 파일을 교체하면 업데이트 가능하지만, - 일부 설정 파일(dicom.sql, dgatesop.lst, dicom.ini)을 조정할 경우 데이터베이스를 다시 생성해야 할 수도 있습니다. - 서버는 반드시 업데이트 전에 중지해야 하며, 서비스로 실행 중이면 제어판에서 중지 또는 서비스 해제가 필요합니다. - 데이터베이스 재생성이 필요한 경우 매우 오랜 시간이 걸릴 수 있으므로 주의해야 합니다. - 기존 데이터를 유지하려면 dicom.sql을 백업 후 복원하는 것이 좋습니다. - 저자의 경우는 data폴더, acrnema.map, dicom.ini 파일을 제외하고 삭제한 뒤 설치압축파일을 풀면 데이터와 설정이 유지된 체로 업그레이드 하고 database reganeration을 하였다.\n\n\n활용 현황\n이 서버프로그램으로 저자는 NMDose, NMIQ, NMFullData, NMTEMPSERVER, ZettaPACS를 구축하여 선량분석시스템, 영상품질자동화, clinical PACS모사, 임시서버, clinical PACS 모사의 목적으로 사용하고 있다.\n\n\nLua script\n쿼리를 정교하게 할 수 있다.\n\n\n저장파일의 이름을 지정하는 방식\n%id_%studydate%modality_%series_%sopuid.dcm\n\n\n\nOrthanc DICOM Server\n벨기에에서 개발한 오픈소스이다. Restful APT를 지원하기 때문에 DICOM query, retrieve, send, move 등을 쉽게 구현할 수 있으리라는기대감으로 설치하여 향후의 시스템을 모사하여 개발을 진행하고 있다.\n\n설치파일\n2025년 2월 27일 release된 25.2.0 버전이 최신이다. https://orthanc.uclouvain.be/downloads/windows-64/installers/index.html 저자는 C:\\Program Files\\ 폴더보다는 C:\\를 선호하여 C:\\Orthanc에 설치하였다.\n\n\n주의사항\n설치이후 처음 실행시에 설치폴더의 Orthanc.exe를 먼저 실핼시키고 방화벽을 해제한 후 explorer를 실행해야 하는 것 같다.\n\n\n장단점\nOrthanc은 웹 기반 DICOM 관리 및 AI 분석, 클라우드 통합이 필요한 경우 유리하다고 한다. Conquest DICOM Server는 빠른 속도의 로컬 PACS, 대량의 DICOM 데이터 처리, 자동화된 스크립팅 (Lua)이 필요한 경우 적합하다고 한다.\n\n\n설정\n.Configuration\\orthanc.json을 notepad 등으로 수정하며 default 값으로 진행하였다.\n// HTTP port for the REST services and for the GUI “HttpPort” : 8042,\n// The DICOM Application Entity Title (cannot be longer than 16 // characters) “DicomAet” : “ORTHANC”,\n// The DICOM port “DicomPort” : 4242,\n// The default encoding that is assumed for DICOM files without // “SpecificCharacterSet” DICOM tag, and that is used when answering // C-FIND requests (including worklists). The allowed values are // “Ascii”, “Utf8”, “Latin1”, “Latin2”, “Latin3”, “Latin4”, // “Latin5”, “Cyrillic”, “Windows1251”, “Arabic”, “Greek”, “Hebrew”, // “Thai”, “Japanese”, “Chinese”, “JapaneseKanji”, “Korean”, and // “SimplifiedChinese”. “DefaultEncoding” : “Latin1”,\n// The list of the known DICOM modalities. This option is ignored if // “DicomModalitiesInDatabase” is set to “true”, in which case you // must use the REST API to define modalities. “DicomModalities” : { “NMDOSE” : [ “NMDOSE”, “127.0.0.1”, 5678 ], “NMIQ” : [ “NMIQ”, “127.0.0.1”, 5679 ], “NMFULLDATA” : [ “NMFULLDATA”, “127.0.0.1”, 5680 ], “NMTEMPSERVER” : [ “NMTEMPSERVER”, “127.0.0.1”, 5681 ], “ZETTAPACS” : [ “ZETTAPACS”, “127.0.0.1”, 5682 ], “SLICER” : [ “SLICER”, “127.0.0.1”, 11112 ] /**\n\n\nremote server"
  },
  {
    "objectID": "posts/tools/DCM4che.html",
    "href": "posts/tools/DCM4che.html",
    "title": "DCM4chee",
    "section": "",
    "text": "SDKMAN\n\nSDKMAN(Software Development Kit MANager)은 유닉스 환경에서 여러 소프트웨어 개발 키트를 손쉽게 관리할 수 있는 CLI 도구이다.\n여기에서는 프로젝트별로 Java 버전을 관리(matching)하기 위해 설치하였다.\n\n\n설치\n\ncurl(Client URL)은 명령줄에서 HTTP, HTTPS, FTP, SCP 등의 프로토콜을 사용하여 데이터를 전송하는 도구인데, Git bash가 설치될 때 같이 설치되므로 git bash에서 아래와 같이 설치하였다.\n\ncurl -s \"https://get.sdkman.io\" | bash\n\n설치 경로\n\nSDKMAN은 기본적으로 현재 로그인한 사용자 계정의 홈 디렉토리에 설치된다.\n따라서 로그인 사용자에 따라 아래와 같은 차이가 발생함을 주의해야 한다.\n\nLaptop: C:.sdkman\nDesktop: C:.sdkman\n\n\npath 설정도 manual로 해주어야 한다.\n설치확인은 git bash에서 아래와 같이 입력한다.\n\nsdk version\n\n\n\nJAVA\n\n기존 Java가 어떤 프로그램에서 사용되는지 명확하지 않아, 먼저 삭제하고 필요할 때 SDKMAN으로 다시 설치하는 전략으로 진행함. #### 기존 Java 삭제\n제어판 -&gt; 프로그램 및 기능 -&gt; Java 삭제\npath에서도 삭제\n\n\nJAVA 설치\nsdk install java 17.0.8-tem\n설치는 .sdkman/candidates/java/17.0.8-tem에 설치됨\nC:\\Users\\Benjamin\\.sdkman\\candidates\\java\\current\\bin\\java.exe\n\n\nJAVA_HOME 설정\nJAVA_HOME: C:\\Users\\Benjamin\\.sdkman\\candidates\\current\n\n\nPATH 설정\nC:\\Users\\Benjamin\\.sdkman\\candidates\\current\\bin\n\n\nJAVA 설치 확인\njava -version\n\n\n\nDCM4chee binary install\n\nDCM4chee는 open source PACS로서 Java로 구현되어 있어 Java가 필요하다.\nJava가 설치되어 있지 않다면 SDKMAN으로 설치하고, DCM4chee를 설치한다.\nDCM4chee는 binary로 설치 시도 하였지만 압축해제 후 폴더에 실행파일이 없는 오류의 원인을 찾지못해 보류하였다.\n\n\n\nApache Maven\n\nApache Maven은 open source build up 도구이며, DCM4chee source build up이 이미 Maven으로 되어 있어 Maven을 설치하였다.\n\n\n설치\n\nSDKMAN으로 설치하였다.\n\nsdk install maven\n설치된 폴더는 아래와 같았다.\nC:\\Users\\Benjamin\\.sdkman\\candidates\\maven\\\n\n\nPATH 설정\nC:\\Users\\Benjamin\\.sdkman\\candidates\\maven\\current\\bin\n\n\nMAVEN 설치 확인\nmvn -version\n\n\n\nDCM4chee source build up\n\nDCM4chee는 source build up이 필요하여 아래의 github를 clone 하였다.\n\ngit clone"
  },
  {
    "objectID": "posts/tools/Conquest.html",
    "href": "posts/tools/Conquest.html",
    "title": "Conquest",
    "section": "",
    "text": "구축 필요성\n개발 단계에서 실제 PACS를 모사할 수 있는 별도의 DICOM 서버를 구축할 필요가 아래와 같은 오픈소스들을 검토하였다.\n\n\nConquest dicom server\n설정과 사용법이 간단하여 저자가 테스트에 가장 먼저 성공한 프로그램이기도 하다. 특히 저장폴더가 직관적이다.\n\n설치파일\n최신 설치파일은 공식사이트가 아닌 Cnquest User Forum에 공개된 2024년 9월 25일 release된 버전 1.5.0e (dicomserver-1.5.0e.zip, https://forum.iq-image.com/forum/index.php?thread/50654-conquest-1-5-0e-released/)가 최신이다.\n\n\n설치방법\n설치방법은 원하는 폴더에서 설치파일의 압축을 풀면된다. 업그레이드시에는 매뉴얼에 따르면 다음의 지시를 따르면 된다. - 기본적으로 exe 및 dll 파일을 교체하면 업데이트 가능하지만, - 일부 설정 파일(dicom.sql, dgatesop.lst, dicom.ini)을 조정할 경우 데이터베이스를 다시 생성해야 할 수도 있습니다. - 서버는 반드시 업데이트 전에 중지해야 하며, 서비스로 실행 중이면 제어판에서 중지 또는 서비스 해제가 필요합니다. - 데이터베이스 재생성이 필요한 경우 매우 오랜 시간이 걸릴 수 있으므로 주의해야 합니다. - 기존 데이터를 유지하려면 dicom.sql을 백업 후 복원하는 것이 좋습니다. - 저자의 경우는 data폴더, acrnema.map, dicom.ini 파일을 제외하고 삭제한 뒤 설치압축파일을 풀면 데이터와 설정이 유지된 체로 업그레이드 하고 database reganeration을 하였다.\n\n\n활용 현황\n이 서버프로그램으로 저자는 NMDose, NMIQ, NMFullData, NMTEMPSERVER, ZettaPACS를 구축하여 선량분석시스템, 영상품질자동화, clinical PACS모사, 임시서버, clinical PACS 모사의 목적으로 사용하고 있다.\n\n\nLua script\n쿼리를 정교하게 할 수 있다.\n\n\n저장파일의 이름을 지정하는 방식\n%id_%studydate%modality_%series_%sopuid.dcm",
    "crumbs": [
      "Tools",
      "Conquest"
    ]
  },
  {
    "objectID": "posts/tools/dcmtk.html",
    "href": "posts/tools/dcmtk.html",
    "title": "DCMTK",
    "section": "",
    "text": "독일의 Office 회사에서 개발한 오픈소스로 C++로 작성되어 속도가 빠르지만 사용법이 어려움\n프로젝트에서는 DCM4che가 쿼리가 원하는 만큼 가능하여 2순위로 둠"
  },
  {
    "objectID": "posts/tools/dicoogle.html",
    "href": "posts/tools/dicoogle.html",
    "title": "Dicoogle",
    "section": "",
    "text": "구축 필요성\n개발 단계에서 실제 PACS를 모사할 수 있는 별도의 DICOM 서버를 구축할 필요가 아래와 같은 오픈소스들을 검토하였다.\n\n\nSicoogle",
    "crumbs": [
      "Tools",
      "Dicoogle"
    ]
  },
  {
    "objectID": "posts/tools/Orthanc.html",
    "href": "posts/tools/Orthanc.html",
    "title": "Orthanc",
    "section": "",
    "text": "벨기에에서 개발한 오픈소스이다. Restful APT를 지원하기 때문에 DICOM query, retrieve, send, move 등을 쉽게 구현할 수 있으리라는기대감으로 설치하여 향후의 시스템을 모사하여 개발을 진행하고 있다.\n\n완전제거방법\n구동이 제대로 되지 않을 때가 많아서 완전제거방법을 조사하니 아래와 같았다.\n\n서비스 관리자에서 “Orthanc” 서비스를 찾아 중지합니다.\nC:\\Program Files\\Orthanc 폴더를 삭제합니다.\nC:\\Users\\&lt;username&gt;\\AppData\\Local\\Orthanc 폴더를 삭제합니다.\nOrthanc 설정 레지스트리 삭제 (Windows만 해당):\n\nregedit를 실행합니다.\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Orthanc 키를 삭제합니다.\n\n제어판에서 “프로그램 제거”를 선택하고 “Orthanc”를 제거합니다.\n\n\n\n설치파일\n공식사이트 https://orthanc.uclouvain.be/downloads/windows-64/installers/index.html 2025년 2월 27일 release된 25.2.0 버전이 최신이다.\n\n\n설치폴더\n기본설치폴더는 C:\\Program Files\\Orthanc Server이며 data는 C:\\Orthanc에 기본 설치된다. 이를 변경하면 Plugins에서 설치경로 인식의 문제 등으로 실행에 문제가 발생하는 것 같으므로 기본설치폴더에 설치하는 것이 좋겠다.\n\n\n설정파일\nmain 설정파일은 C:\\Program Files\\Orthanc Server\\Configuration\\orthanc.json이다.\n\n\nDICOMModality 설정\n매뉴얼(https://orthanc.uclouvain.be/book/integrations/modality.html#configure-modality)의 예시는 아래와 같았다.\n// The list of the known DICOM modalities\n\"DicomModalities\" : {\n  \"echo1\" : [ \"ECHO1\", \"123.124.125.10\", 104 ]\n},\n위를 참고하여 개발시스템의 DicomModality를 아래와 같이 설정하였다.\n  \"NMDOSE\" : [ \"NMDOSE\", \"127.0.0.1\", 5678 ],\n  \"NMIQ\" : [ \"NMIQ\", \"127.0.0.1\", 5679 ],\n  \"NMFULLDATA\" : [ \"NMFULLDATA\", \"127.0.0.1\", 5680 ],\n  \"NMTEMPSERVER\" : [ \"NMTEMPSERVER\", \"127.0.0.1\", 5681 ],\n  \"ZETTAPACS\" : [ \"ZETTAPACS\", \"127.0.0.1\", 5682 ],\n  \"SLICER\" : [ \"SLICER\", \"127.0.0.1\", 11112 ]\nconfiguration을 설정하는 동안에 Orthanc를 완전히 중지하였다가 수정 후 service를 재개하여야 수정사항이 반영됨을 주의해야 한다. 그리고 쓰기권한이 제한된 경우에는 이를 해결해야 한다.\n\n\nPort\n\n4242\n\n\n\nHPPT port\n\n8042\n\n\n\n설정\n\nPostgreSQL로 DICOM metadata를 저장하기 위해서 postgresql.json을 아래와 같이 설정하였다.\n\n{\n  \"PostgreSQL\" : {\n    \"EnableIndex\" : true,\n    \"EnableStorage\" : false,               // You likely don't need to enable this option\n    \"Host\" : \"localhost\",\n    \"Port\" : 5432,\n    \"Database\" : \"orthanc\",\n    \"Username\" : \"nmuser\",\n    \"Password\" : \"iloveben\",\n    \"Lock\" : true,\n    \"EnableSsl\" : false,                   // New in release 3.0\n    \"MaximumConnectionRetries\" : 10,       // New in release 3.0\n    \"ConnectionRetryInterval\" : 5,         // New in release 3.0\n    \"IndexConnectionsCount\" : 50,          // New in release 4.0 - new default value in 7.0\n    \"TransactionMode\": \"ReadCommitted\",    // New in release 6.0 - new default value in 7.0\n    \"EnableVerboseLogs\": false,            // New in release 6.0\n    \"HousekeepingInterval\": 1,             // New in release 7.0\n    \"AllowInconsistentChildCounts\": false  // New in release 7.2\n  }\n}\n\n\nRetrieve 자동화\nOrthanc에 내장된 Lua engine으로 특정기간동안의 Modality==“PT”인 경우를 retrieve하도록 다음의 단계를 진행하였다. - orthanc.json에서 Lua script를 아래와 같이 활성화하였다.\n\"LuaScripts\" : [C:\\\\Orthanc\\\\lua\\\\retrieve_nm_studies.lua\"],\n그러나 query 요청에 실패해 일단 보류\ncurl -X POST http://localhost:8042/tools/execute-script --data-binary \"OnTimer()\"",
    "crumbs": [
      "Tools",
      "Orthanc"
    ]
  },
  {
    "objectID": "posts/tools/SDKMAN.html",
    "href": "posts/tools/SDKMAN.html",
    "title": "SDKMAN",
    "section": "",
    "text": "JAVA 버전관리 용 Git bash에 설치\ncurl -s \"https://get.sdkman.io\" | bash\n경로설정\nC:\\Users\\Administrator\\.sdkman\\bin"
  }
]