[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "NMIQ",
    "section": "",
    "text": "Dose Report들을 가지고 있는 DICOM Server\n“C:”에 데이터가 있음"
  },
  {
    "objectID": "index.html#python에서-package의-개념",
    "href": "index.html#python에서-package의-개념",
    "title": "NMIQ",
    "section": "### Python에서 package의 개념",
    "text": "### Python에서 package의 개념\n\nDICOM 읽어오기\n\ndicom_files는 리스트이므로 []로 초기화\nos.walk는 (root, dirs, files) 형태의 튜플을 반환하며 Python의 for loop에서는 리스트나 튜플의 요소를 동시에 할당하는 “언패킹” 기능이 지원되므로 이를 사용\n튜플은 변형할 수 없는 리스트라 할 수 있으며, 리스트에 비해 속도가 빠르고 메모리 사용량이 적으며, 함수 반환 값, 여러 변수 할당(Unpacking), for 루프에서 다중 변수 할당 등에 자주 사용된다.\nendswith()는 str 클래스의 내장 메서드로써 string 문자에 dot 연산자로 붙이면 T/F를 반환함\nfile_path를 만들 때, dirs를 제외함에 주의할 것\npydicom.read는 DICOM을 다루기 위한 목적으로 만들어진 Dataset 클래쓰의 객체를 반환해주며, get method를 이용하면 속성명으로 안전하게 (= 값이 없는 경우에는 default를 지정하여) 조회하여 할 수 있다.\n스캐너 또는 제조사별로 DICOM 문자코딩이 달라 SpecificCharacterSet을 파악하고, 이를 위한 인코딩디코딩 함수를 만들었다. 하지만 인코딩디코딩 오류전략을 잘 못 구현하여 수정이 필요하다. 디버기을 위해서 original_study_description 등을 사용하고 있다.\n\n\n\nimport os\nimport pydicom\n\ndef read_dicom_files(directory):\n    dicom_files = []\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if file.endswith(\".dcm\"):\n                file_path = os.path.join(root, file)\n                ds = pydicom.dcmread(file_path, stop_before_pixels=True)\n                character_set = ds.get('SpecificCharacterSet', 'ISO_IR 192')  # UTF-8 as default\n\n                original_study_description = ds.get('StudyDescription', 'N/A')\n                original_patient_name = ds.get('PatientName', 'N/A')\n\n                print(f\"File: {file} - Specific Character Set: {character_set}\")\n\n                if 'StudyDescription' in ds:\n                    study_description = decode_based_on_character_set(ds.StudyDescription, character_set)\n                    ds.StudyDescription = study_description\n                    print(f\"Original Study Description: {original_study_description} -&gt; Decoded: {study_description}\")\n\n                if 'PatientName' in ds:\n                    patient_name = decode_based_on_character_set(ds.PatientName, character_set)\n                    ds.PatientName = patient_name\n                    print(f\"Original Patient Name: {original_patient_name} -&gt; Decoded: {patient_name}\")\n\n                dicom_files.append(ds)\n    return dicom_files\n\ndef decode_based_on_character_set(value, character_set):\n    if character_set == 'ISO_IR 100':\n        return value.encode('iso-8859-1').decode('latin1')\n    elif character_set == 'ISO_IR 192':\n        return value  # UTF-8 encoded, no need to transform\n    elif character_set == 'ISO_IR 149':\n        return value.encode('iso-8859-1').decode('euc-kr')\n    return value  # Default or unknown character set, return as is\n\n# 실행할 디렉토리 경로 설정\ndirectory = r\"C:\\NMDose\\data\"\n\n# 지정된 디렉토리에서 DICOM 파일들을 읽어옵니다.\ndicom_files = read_dicom_files(directory)\n\nFile: CT_0501_1.3.12.2.1107.5.1.4.45592.30000024022200491945300000190.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: PET^KCCH_Brain_Alz (Adult) -&gt; Decoded: PET^KCCH_Brain_Alz (Adult)\nOriginal Patient Name: NOH OK BUN -&gt; Decoded: NOH OK BUN\nFile: CT_0501_1.3.12.2.1107.5.1.4.45592.30000024031223303798400000224.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: PET^KCCH_Brain_Alz (Adult) -&gt; Decoded: PET^KCCH_Brain_Alz (Adult)\nOriginal Patient Name: KIM SUK JA -&gt; Decoded: KIM SUK JA\nFile: CT_0501_1.3.12.2.1107.5.1.4.45592.30000024011023285176500000773.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: PET^KCCH_Brain_Alz (Adult) -&gt; Decoded: PET^KCCH_Brain_Alz (Adult)\nOriginal Patient Name: SEO JUNG YE -&gt; Decoded: SEO JUNG YE\nFile: CT_0999_1.2.840.113619.2.290.3.296522351.221.1704686293.232.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾ -&gt; Decoded: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾\nOriginal Patient Name: Song Jong Rim -&gt; Decoded: Song Jong Rim\nFile: SR_0997_1.2.840.113619.2.290.3.296522351.221.1704686293.234.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾ -&gt; Decoded: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾\nOriginal Patient Name: Song Jong Rim -&gt; Decoded: Song Jong Rim\nFile: CT_0999_1.2.840.113619.2.290.3.296522351.345.1710718439.32.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾ -&gt; Decoded: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾\nOriginal Patient Name: Jung Yang Gu -&gt; Decoded: Jung Yang Gu\nFile: SR_0997_1.2.840.113619.2.290.3.296522351.345.1710718439.34.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾ -&gt; Decoded: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾\nOriginal Patient Name: Jung Yang Gu -&gt; Decoded: Jung Yang Gu\nFile: CT_0501_1.3.12.2.1107.5.1.4.45592.30000024020423410571800001245.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: PET^KCCH_Brain_Alz (Adult) -&gt; Decoded: PET^KCCH_Brain_Alz (Adult)\nOriginal Patient Name: PARK KEUM SEON -&gt; Decoded: PARK KEUM SEON\nFile: CT_0501_1.3.12.2.1107.5.1.4.45592.30000024010923324851500000245.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: PET^KCCH_Brain_Alz (Adult) -&gt; Decoded: PET^KCCH_Brain_Alz (Adult)\nOriginal Patient Name: KIM JUNG BUN -&gt; Decoded: KIM JUNG BUN\nFile: CT_0501_1.3.12.2.1107.5.1.4.45592.30000024013123395351500000200.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: PET^KCCH_Brain_Alz (Adult) -&gt; Decoded: PET^KCCH_Brain_Alz (Adult)\nOriginal Patient Name: JEON HAE YEONG -&gt; Decoded: JEON HAE YEONG\nFile: CT_0999_1.2.840.113619.2.290.3.296522351.163.1708299137.595.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾ -&gt; Decoded: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾\nOriginal Patient Name: Kim Gwi Sun -&gt; Decoded: Kim Gwi Sun\nFile: SR_0997_1.2.840.113619.2.290.3.296522351.163.1708299137.597.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾ -&gt; Decoded: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾\nOriginal Patient Name: Kim Gwi Sun -&gt; Decoded: Kim Gwi Sun\nFile: CT_0501_1.3.12.2.1107.5.1.4.45592.30000024010823285431200000274.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: PET^KCCH_Brain_Alz (Adult) -&gt; Decoded: PET^KCCH_Brain_Alz (Adult)\nOriginal Patient Name: LEE SANG YEONG -&gt; Decoded: LEE SANG YEONG\nFile: CT_0999_1.2.840.113619.2.290.3.296522351.31.1705997406.736.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: (Á¾ÇÕ°ËÁø)F-18 ÇÃ·Î¶óÇ -&gt; Decoded: (Á¾ÇÕ°ËÁø)F-18 ÇÃ·Î¶óÇ\nOriginal Patient Name: Lee Gyeong Seon -&gt; Decoded: Lee Gyeong Seon\nFile: SR_0997_1.2.840.113619.2.290.3.296522351.31.1705997406.738.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: (Á¾ÇÕ°ËÁø)F-18 ÇÃ·Î¶óÇ -&gt; Decoded: (Á¾ÇÕ°ËÁø)F-18 ÇÃ·Î¶óÇ\nOriginal Patient Name: Lee Gyeong Seon -&gt; Decoded: Lee Gyeong Seon\nFile: CT_0999_1.2.840.113619.2.290.3.296522351.30.1707286774.167.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾ -&gt; Decoded: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾\nOriginal Patient Name: Park Yeong E -&gt; Decoded: Park Yeong E\nFile: SR_0997_1.2.840.113619.2.290.3.296522351.30.1707286774.169.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾ -&gt; Decoded: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾\nOriginal Patient Name: Park Yeong E -&gt; Decoded: Park Yeong E\nFile: CT_0501_1.3.12.2.1107.5.1.4.45592.30000024021400020553100000614.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: PET^KCCH_Brain_Alz (Adult) -&gt; Decoded: PET^KCCH_Brain_Alz (Adult)\nOriginal Patient Name: KIM MI JA -&gt; Decoded: KIM MI JA\nFile: CT_0999_1.2.840.113619.2.290.3.296522351.31.1705997414.669.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾ -&gt; Decoded: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾\nOriginal Patient Name: Choi Eul Rye -&gt; Decoded: Choi Eul Rye\nFile: SR_0997_1.2.840.113619.2.290.3.296522351.31.1705997414.671.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾ -&gt; Decoded: F-18 ÇÃ·Î¶óÇÃ·Î³î ³ú ¾\nOriginal Patient Name: Choi Eul Rye -&gt; Decoded: Choi Eul Rye\nFile: CT_0501_1.3.12.2.1107.5.1.4.45592.30000024011823432560900000123.dcm - Specific Character Set: ISO_IR 100\nOriginal Study Description: PET^KCCH_Brain_Alz (Adult) -&gt; Decoded: PET^KCCH_Brain_Alz (Adult)\nOriginal Patient Name: PARK MYUNG JA -&gt; Decoded: PARK MYUNG JA\n\n# 읽어온 DICOM 파일의 개수를 출력합니다.\nprint(f\"dicom 파일 개수: {len(dicom_files)}\")\n\ndicom 파일 개수: 21\n\n\n\ndef filter_dicom_files_by_description(dicom_files):\n    \"\"\"DICOM 파일들을 SeriesDescription에 따라 'Dose Report'와 'Patient Protocol'로 필터링합니다.\"\"\"\n    dose_report_files = []\n    patient_protocol_files = []\n\n    for file in dicom_files:\n        if hasattr(file, 'SeriesDescription'):\n            if file.SeriesDescription == \"Dose Report\":\n                dose_report_files.append(file)\n            elif file.SeriesDescription == \"Patient Protocol\":\n                patient_protocol_files.append(file)\n\n    return dose_report_files, patient_protocol_files\n\n\n# 'Dose Report'와 'Patient Protocol'에 해당하는 파일 필터링\ndose_report_files, patient_protocol_files = filter_dicom_files_by_description(dicom_files)\n\n# 결과 확인\nprint(f\"Dose Report 파일 개수: {len(dose_report_files)}\")\n\nDose Report 파일 개수: 6\n\nprint(f\"Patient Protocol 파일 개수: {len(patient_protocol_files)}\")\n\nPatient Protocol 파일 개수: 9"
  },
  {
    "objectID": "encoding_decoding.html",
    "href": "encoding_decoding.html",
    "title": "한글 디코딩",
    "section": "",
    "text": "DICOM에서 사용되는 문자열은 인코딩(Encoding) 시 1~3바이트(또는 그 이상)의 이진 데이터로 저장되며, 이때 인코딩 방식은 SpecificCharacterSet(0008,0005) 태그에 기록된다. 따라서, SpecificCharacterSet의 값에 맞추어 디코딩(Decoding)하면 문자열이 깨지지 않고 올바르게 변환될 수 있다.\n한글이 포함된 문자열은 DICOM에서 최소 두 가지 방식으로 저장될 수 있다. - ISO_IR 149(EUC-KR)는 과거 한글 DICOM 시스템에서 사용되었으며, 완성형 한글만 지원하므로 일부 한글 표현이 제한될 수 있다. - ISO_IR 192(UTF-8)은 유니코드 기반의 인코딩 방식으로 다국어 지원이 가능하며, 최신 DICOM 시스템에서 가장 권장되는 방식이다.\npydicom.dcmread()를 사용하면 DICOM 파일 내의 문자열 데이터는 SpecificCharacterSet(0008,0005)에 따라 자동으로 디코딩되어 Python의 str 객체로 반환됩니다.\n만약에 실제 encoding과 specificcharacterset 지정이 다르면 pydicom 결과는 깨진 문자열이 보이게 되는데, 이 때, 지정대로 다시 encoding해주고 dicom 저장 시 되었던 encoding으로 decoding 한다면 오류를 해결 할 수 있다.\na1_dicom_reader에 정의된 함수에서는 조건과 인코딩과 디코딩이 모두 같은 방식으로 잘 못 만들어진 부분이 있다. 수정이 필요함 2025-02-26\n스캐너 종류에 따라 검사명이 깨어져 있으며 이는 deccoding fix가 되지 않는다."
  }
]