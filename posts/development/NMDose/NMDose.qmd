---
title: "NMDose"
description: "NMDose 개발과정기록"
author: "BenKorea"
date: "2025-02-19"
date-modified: last-modified
categories: [deveolpment, note, NMDose]
---

### Conquest DICOM Server

-   Dose Report들을 가지고 있는 DICOM Server
-   "C:\NMDose\data"에 데이터가 있음

### 프로젝트 만들기

-   파이썬을 선택한 이유: 다른 언어에 비해 DICOM 개체를 딕셔너리처럼 태그 및 속성으로 접근할 수 있어 코딩이 쉬움
-   원격저장소 template를 NMIQ로 파생
-   로컬로 clone
-   가상화
-   프로젝트 다른 이름으로 저장

### Quarto에서 주의할 사항

-   코드청크의 순서가 파일을 읽어오는 순서가 되므로 순서에 주의를 요함

### PostgreSQL DB 만들기

-   DICOM header의 메타데이터를 저장하기 위함

### DICOM information

-   "C:\NMDose\data" DICOM으로부터 읽어들일 DICOM tag들을 튜플의 리스트 형식으로 a0_extracted_dicom_tag_information.py에 기록하였다.
-   

### Python에서 package의 개념
-   

### DICOM 읽어오기

- dicom_files는 리스트이므로 []로 초기화
- `os.walk`는 (root, dirs, files) 형태의 튜플을 반환하며 Python의 for loop에서는 리스트나 튜플의 요소를 동시에 할당하는 "언패킹" 기능이 지원되므로 이를 사용
- 튜플은 변형할 수 없는 리스트라 할 수 있으며, 리스트에 비해 속도가 빠르고 메모리 사용량이 적으며, 함수 반환 값, 여러 변수 할당(Unpacking), for 루프에서 다중 변수 할당 등에 자주 사용된다.
- endswith()는 str 클래스의 내장 메서드로써 string 문자에 dot 연산자로 붙이면 T/F를 반환함
- file_path를 만들 때, dirs를 제외함에 주의할 것
- pydicom.read는 DICOM을 다루기 위한 목적으로 만들어진 Dataset 클래쓰의 객체를 반환해주며, get method를 이용하면 속성명으로 안전하게 (= 값이 없는 경우에는 default를 지정하여) 조회하여 할 수 있다.
- 스캐너 또는 제조사별로 DICOM 문자코딩이 달라 SpecificCharacterSet을 파악하고, 이를 위한 인코딩디코딩 함수를 만들었다. 하지만 인코딩디코딩 오류전략을 잘 못 구현하여 수정이 필요하다. 디버기을 위해서 original_study_description 등을 사용하고 있다. 
- 
```{python}
#| label: a1_dicom_reader

import os
import pydicom

def read_dicom_files(directory):
    dicom_files = []
    for root, dirs, files in os.walk(directory):
        for file in files:
            if file.endswith(".dcm"):
                file_path = os.path.join(root, file)
                ds = pydicom.dcmread(file_path, stop_before_pixels=True)
                character_set = ds.get('SpecificCharacterSet', 'ISO_IR 192')  # UTF-8 as default

                original_study_description = ds.get('StudyDescription', 'N/A')
                original_patient_name = ds.get('PatientName', 'N/A')

                print(f"File: {file} - Specific Character Set: {character_set}")

                if 'StudyDescription' in ds:
                    study_description = decode_based_on_character_set(ds.StudyDescription, character_set)
                    ds.StudyDescription = study_description
                    print(f"Original Study Description: {original_study_description} -> Decoded: {study_description}")

                if 'PatientName' in ds:
                    patient_name = decode_based_on_character_set(ds.PatientName, character_set)
                    ds.PatientName = patient_name
                    print(f"Original Patient Name: {original_patient_name} -> Decoded: {patient_name}")

                dicom_files.append(ds)
    return dicom_files

def decode_based_on_character_set(value, character_set):
    if character_set == 'ISO_IR 100':
        return value.encode('iso-8859-1').decode('latin1')
    elif character_set == 'ISO_IR 192':
        return value  # UTF-8 encoded, no need to transform
    elif character_set == 'ISO_IR 149':
        return value.encode('iso-8859-1').decode('euc-kr')
    return value  # Default or unknown character set, return as is

# 실행할 디렉토리 경로 설정
directory = r"C:\NMDose\data"

# 지정된 디렉토리에서 DICOM 파일들을 읽어옵니다.
dicom_files = read_dicom_files(directory)

# 읽어온 DICOM 파일의 개수를 출력합니다.
print(f"dicom 파일 개수: {len(dicom_files)}")
```

```{python}
#| label: a2_filter_dicom_files_by_descrition

def filter_dicom_files_by_description(dicom_files):
    """DICOM 파일들을 SeriesDescription에 따라 'Dose Report'와 'Patient Protocol'로 필터링합니다."""
    dose_report_files = []
    patient_protocol_files = []

    for file in dicom_files:
        if hasattr(file, 'SeriesDescription'):
            if file.SeriesDescription == "Dose Report":
                dose_report_files.append(file)
            elif file.SeriesDescription == "Patient Protocol":
                patient_protocol_files.append(file)

    return dose_report_files, patient_protocol_files


# 'Dose Report'와 'Patient Protocol'에 해당하는 파일 필터링
dose_report_files, patient_protocol_files = filter_dicom_files_by_description(dicom_files)

# 결과 확인
print(f"Dose Report 파일 개수: {len(dose_report_files)}")
print(f"Patient Protocol 파일 개수: {len(patient_protocol_files)}")
```

```{r thr end}

```